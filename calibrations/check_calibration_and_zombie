
//6009-6299
//plot two same variables from 6545 calibrated with 7671 vs from same run 7671.
#include "TH1F.h"
#include <TH2.h>
#include <TCanvas.h>
#include <TObject.h>
using namespace std;

#define NRUNS 5//86
void cal_6545(){
  // gErrorIgnoreLevel= kError;
  gROOT->SetBatch(kTRUE);//kFALSE =0, kTRUE =1

#include "header.h"
  Int_t runs[NRUNS]= {6263,1234, 6578,6756};//,6081,6088,6089,6090,6115,6116,6245,6246,6247,6248,6249,6250,6263,6264,6265,6266,6267,6270,6271,6272,6273,6290,6291,6292,6293,6359,6360,6267,6368,6370,6459,6460,6465,6466,6467,6486,6490,6493,6524,6525,6526,6527,6528,6529};//6074

    //{ 6068, 6070, 6071, 6073, 6081, 6088 ,6089, 6090 , 6091 ,6093 ,6096, 6545, 6548, 6549,  6550 ,6551, 6111, 6112, 6114  ,6115, 6116 ,6124 ,6125, 6136 ,6137 ,6138,  6486,  6489  ,6490 , 6493, 6245, 6246, 6247 ,6248 ,6249 ,6250, 6263, 6264 ,6265, 6266, 6267 , 6070, 6271, 6272, 6263, 6451, 6452, 6453, 6459, 6460, 6465, 6466, 6467, 6473, 6474, 6475, 6476, 6477, 6478, 6479, 6290, 6291, 6292, 6293, 6306, 6307 ,6308, 6348, 6349, 6350, 6351, 6359, 6360, 6367, 6370,  6375,  6378, 6379, 6380, 6381, 6324, 6325, 6326,  6527, 6528, 6529};
  TFile *f[NRUNS];
  TTree *tt[NRUNS];
  for(Int_t i=0; i<NRUNS; i++){

    // f[i]=new TFile(Form("/lustre/expphy/volatile/hallc/spring17/hdbhatt/group/ROOTfiles/check_ngconly_7671_tofall/7671_checked_to_%d_-1.root", runs[i]),"read");
    // f[i]=new TFile(Form("/lustre/expphy/volatile/hallc/spring17/hdbhatt/group/ROOTfiles/spring_final/%d_72.root", runs[i]),"read"); 
    // f[i]=new TFile(Form("/lustre/expphy/volatile/hallc/spring17/hdbhatt/group/ROOTfiles/fall_old_calib/coin_replay_production_%d_-1.root", runs[i]),"read");
    f[i]=new TFile(Form("/lustre/expphy/volatile/hallc/spring17/hdbhatt/group/ROOTfiles/pcal_final/coin_replay_production_%d_-1.root", runs[i]),"read");
 

    if ((!f[i]) || (f[i]->IsZombie())){
    
      cout << "No file found or Zombie file" << endl;
      // exit(1);

      continue;
      //if (!f[i])
      //	exit(1);

    }



    tt[i]=(TTree *)f[i]->Get("T");
    // TChain *tt = new TChain("T");
     
    // tt->Add("/lustre/expphy/volatile/hallc/spring17/hdbhatt/group/ROOTfiles/spring_final/7671_checked_to_7593_-1.root");

    //TFile *ff = new TFile("root/7672_with_7671.root", "RECREATE");      

    Double_t pionMass = 0.1395701835;   

    Double_t pcaletot,pcaletotnorm,pcaletracknorm,pbeta,hbeta,pdelta,hdelta,pcaletottracknorm,hcaletot,pcaleprtracknorm,hcalepr,paeronpe,hcernpe,phg,W,Q2,xbj,ctime,E_pi,z_had,z_had_all,pkinomega,PgtrP,HgtrP,hhodstarttime,phodstarttime,hdipole, pdipole,event_type;
 
    //cout<<f[i]<<endl;
    TH1D *h_ctime = new TH1D("h_ctime", "ctime (ns)", 400,25,75);
    TH1D *h_z = new TH1D("h_z","z_had_all", binz, loz, hiz);                                      
    TH1D *h_Q2d = new TH1D("h_Q2d","Q2 (GeV2)",binq, loq, hiq);  
    TH1D *h_xd = new TH1D("h_xd","X_bj", binx, lox, hix);   
    TH1D *h_ctimed = new TH1D("h_ctimed", "ctimed (ns)", 400,25,75);
    TH1D *h_zd = new TH1D("h_zd","z_had", binz, loz, hiz);                                      
    TH1D *h_caletracknorm = new TH1D("h_caletracknorm","h_caletracknorm", 100, 0.0001, 2);                                      
    TH1D *h_caleprtracknorm = new TH1D("h_caleprtracknorm","h_caleprtracknorm", 100, 0.0001, 0.8);                                      
    TH1D *h_caletottracknorm = new TH1D("h_caletottracknorm","h_caletottracknorm", 100, 0.0001, 2);    
    TH2D *h_shwr_vs_preshwr_notot = new TH2D("h_shwr_vs_preshwr_notot","h_shwr_vs_preshwr_notot",100, 0.001, 1.5, 100, 0.001,1.5);
    TH2D *h_shwr_vs_preshwr_tot = new TH2D("h_shwr_vs_preshwr_tot","h_shwr_vs_preshwr_tot",100, 0.001, 1.5, 100, 0.001,1.5);
    TH2D *h_dp_vs_caletracknorm = new TH2D("h_dp_vs_caletracknorm","h_dp_vs_caletracknorm", 100, 0.001, 2, 100, -12, 22);     
    TH2D *h_dp_vs_caletottracknorm = new TH2D("h_dp_vs_caletottracknorm","h_dp_vscaletottracknorm", 100, 0.001, 2, 100, -12, 22);                                      
    TH2D *h_dp_vs_beta = new TH2D("h_dp_vs_beta","h_dp_vs_beta", 100,0.001, 2, 100, -12, 22);      
    TH2D *h_ctime_vs_caletottracknorm_nopid = new TH2D("h_ctime_vs_caletottracknorm_nopid","h_ctime_vscaletottracknorm_nopid", 100, 28, 58,100, 0.001,2);                                      

    //ctime cut is applied:
    TH1D *h_ctime_ctime = new TH1D("h_ctime_ctime", "ctime_ctime (ns)", 400,25,75);
    TH1D *h_z_ctime = new TH1D("h_z_ctime","z_had_all", binz, loz, hiz);                                      
    TH1D *h_Q2d_ctime = new TH1D("h_Q2d_ctime","Q2 (GeV2)",binq, loq, hiq);  
    TH1D *h_xd_ctime = new TH1D("h_xd_ctime","X_bj", binx, lox, hix);   
    TH1D *h_ctimed_ctime = new TH1D("h_ctimed_ctime", "ctimed_ctime (ns)", 400,25,75);
    TH1D *h_zd_ctime = new TH1D("h_zd_ctime","z_had", binz, loz, hiz);                                      
    TH1D *h_caletracknorm_ctime = new TH1D("h_caletracknorm_ctime","h_caletracknorm_ctime", 100, 0.0001, 2);                                      
    TH1D *h_caletottracknorm_ctime = new TH1D("h_caletottracknorm_ctime","h_caletottracknorm_ctime", 100, 0.0001, 2); 
    TH1D *h_caleprtracknorm_ctime = new TH1D("h_caleprtracknorm_ctime","h_caleprtracknorm_ctime", 100, 0.0001, 0.8);                                    
    TH2D *h_shwr_vs_preshwr_notot_ctime = new TH2D("h_shwr_vs_preshwr_ctime","h_shwr_vs_preshwr_ctime",100, 0.001, 1.5, 100, 0.001,1.5);
    TH2D *h_shwr_vs_preshwr_tot_ctime = new TH2D("h_shwr_vs_preshwr_tot_ctime","h_shwr_vs_preshwr_tot_ctime",100, 0.001, 1.5, 100, 0.001,1.5);
    TH2D *h_dp_vs_caletottracknorm_ctime = new TH2D("h_dp_vs_caletottracknorm_ctime","h_dp_vs_caletottracknorm_ctime", 100, 0.001, 2, 100, -12, 22);   
    TH2D *h_dp_vs_caletracknorm_ctime = new TH2D("h_dp_vs_caletracknorm_ctime","h_dp_vs_caletracknorm_ctime", 100, 0.001, 2, 100, -12, 22);     
    TH2D *h_dp_vs_beta_ctime = new TH2D("h_dp_vs_beta_ctime","h_dp_vs_beta_ctime", 100,0.001, 2, 100, -12, 22);      
      
    //Pions plots:  
    TH1D *h_caletracknorm_pi = new TH1D("h_caletracknorm_pi","h_caletracknorm_pi", 100, 0.0001, 2);                                      
    TH1D *h_caletottracknorm_pi = new TH1D("h_caletottracknorm_pi","h_caletottracknorm_pi", 100, 0.0001, 1.5);                                      
    TH1D *h_caleprtracknorm_pi = new TH1D("h_caleprtracknorm_pi","h_caleprtracknorm_pi", 100, 0.0001, 0.5);                                      
    TH2D *h_shwr_vs_preshwr_tot_pi = new TH2D("h_shwr_vs_preshwr_tot_pi","h_shwr_vs_preshwr_tot_pi",100, 0.001, 0.4, 100, 0.001,1.5);
    TH2D *h_dp_vs_beta_pi = new TH2D("h_dp_vs_beta_pi","h_dp_vs_beta_pi", 100,0.001, 2, 100, -12, 22);      
    TH2D *h_ctime_vs_caletottracknorm = new TH2D("h_ctime_vs_caletottracknorm","h_ctime_vs_caletottracknorm",100, 30, 55, 100, 0.001, 2.0);
    TH2D *h_ctime_vs_caletottracknorm_pi = new TH2D("h_ctime_vs_caletottracknorm_pi","h_ctime_vs_caletottracknorm_pi",100, 30, 55, 100, 0.001,2.0);
    TH2D *h_dp_vs_caletottracknorm_pi = new TH2D("h_dp_vs_caletottracknorm_pi","h_dp_vs_caletottracknorm_pi", 100, 0.001, 1.5, 100, -12, 22);   


    //cout<<runs[i]<<endl;
  
    Int_t cntsepi=0;
    tt[i]->SetBranchAddress("P.gtr.p", &PgtrP); 
    tt[i]->SetBranchAddress("H.gtr.p", &HgtrP); 
    tt[i]->SetBranchAddress("P.gtr.beta", &pbeta);                                                                       
    tt[i]->SetBranchAddress("H.gtr.beta", &hbeta); 
    tt[i]->SetBranchAddress("H.gtr.dp", &hdelta);                                                                            
    tt[i]->SetBranchAddress("P.gtr.dp", &pdelta);                                                                                
    tt[i]->SetBranchAddress("P.cal.eprtracknorm", &pcaleprtracknorm);                                                                    
    tt[i]->SetBranchAddress("P.cal.etottracknorm", &pcaletottracknorm);                                                                  
    tt[i]->SetBranchAddress("P.hgcer.npeSum", &phg);
    tt[i]->SetBranchAddress("P.aero.npeSum", &paeronpe);                                          
    tt[i]->SetBranchAddress("H.cal.eprtracknorm", &hcalepr);  
    tt[i]->SetBranchAddress("P.cal.etracknorm", &pcaletracknorm); 
    tt[i]->SetBranchAddress("H.cal.etottracknorm", &hcaletot);                                          
    tt[i]->SetBranchAddress("H.cer.npeSum", &hcernpe);    
    tt[i]->SetBranchAddress("CTime.ePiCoinTime_ROC2", &ctime);
    tt[i]->SetBranchAddress("H.hod.goodstarttime", &hhodstarttime);
    tt[i]->SetBranchAddress("P.hod.goodstarttime",&phodstarttime);
    tt[i]->SetBranchAddress("P.dc.InsideDipoleExit",&pdipole);
    tt[i]->SetBranchAddress("H.dc.InsideDipoleExit",&hdipole);
    tt[i]->SetBranchAddress("P.cal.etot",&pcaletot);
    tt[i]->SetBranchAddress("P.cal.etotnorm",&pcaletotnorm);
    tt[i]->SetBranchAddress("g.evtyp",&event_type);


    Bool_t ctime_cut, acc_cut, accR_cut, accL_cut,data_cut,pid_cut, pion_cut;
 
    Long64_t nentriesD = tt[i]->GetEntries();

    // cout<<"Total Entries = "<<nentriesD<<endl;
    // for (int kk=0; kk<nentriesD/100;  kk++)//============================================>evts
      for (int kk=0; kk<nentriesD;  kk++)//============================================>evts
	   {

	     tt[i]->GetEntry(kk);

	     //cout<<"total entries = "<<tt[i]->GetEntries()<<endl;
	     //	if (kk % 700000 == 0) cout << kk*100/nentriesD << "   % of data done" << endl;

	     data_cut = paeronpe>2.0 &&  pdelta >-10 && pdelta < 20  &&  pbeta > 0.5 && pbeta < 1.5 && hhodstarttime ==1 &&phodstarttime == 1 && hdipole==1 && pdipole ==1&&event_type==4;// && phg>2.0;

	     //Also find the Ctime peak and take just 3 ns on either side of the peak and select the pions
  
	     if(data_cut)
	       {    cntsepi++;

		 h_ctime->Fill(ctime);
		 E_pi = sqrt(pow(pionMass,2) + pow(PgtrP,2));
		 z_had_all = E_pi/pkinomega;
		 h_z->Fill(z_had_all);
		 h_caletracknorm->Fill(pcaletracknorm);
		 h_caleprtracknorm->Fill(pcaleprtracknorm);
		 h_caletottracknorm->Fill(pcaletottracknorm);
		 h_shwr_vs_preshwr_notot->Fill(pcaleprtracknorm,pcaletracknorm-pcaleprtracknorm);
		 h_shwr_vs_preshwr_tot->Fill(pcaleprtracknorm,pcaletottracknorm-pcaleprtracknorm);
		 h_dp_vs_caletottracknorm->Fill(pcaletottracknorm,pdelta);
		 h_dp_vs_caletracknorm->Fill(pcaletracknorm,pdelta);
		 h_dp_vs_beta->Fill(pbeta,pdelta);
		 h_ctime_vs_caletottracknorm_nopid->Fill(ctime,pcaletottracknorm);
	       }
	   }
	 // cout <<"===== events that passed all cuts except ctime = " << cntsepi << " ===== "<<endl;
	 Int_t bin_max = h_ctime->GetMaximumBin();
	 Double_t max_value = h_ctime->GetBinCenter(bin_max);
	 // cout<<"===== ctime  peak is at =  "<<max_value<< ""<<" ns ====="<<endl; 
   

	 Int_t evts=0;
	 // for (int ll=0; ll<nentriesD/100;  ll++){
	  for (int ll=0; ll<nentriesD;  ll++){
	   tt[i]->GetEntry(ll);
	   // if (ll % 700000 == 0) cout << ll*100/nentriesD << "   % of data done" << endl;


	   pid_cut =  paeronpe>2.0 &&  pdelta >-10 && pdelta < 20  &&  pbeta > 0.5 && pbeta < 1.5 && hhodstarttime ==1 &&phodstarttime == 1 && hdipole==1 && pdipole ==1 && ctime>(max_value-1.5) && ctime <(max_value + 1.5)&&event_type==4  ;//&&phg>2.0      ;//phgc>2
 
	   //pion_cut =  paeronpe>2.0 &&  pdelta >-10 && pdelta < 20  &&  pbeta > 0.5 && pbeta < 1.5 && hhodstarttime ==1 &&phodstarttime == 1 && hdipole==1 && pdipole ==1 && ctime>(max_value-1.5) && ctime <(max_value + 1.5) &&   hbeta > 0.5 &&hbeta < 1.5  && hdelta> -10 && hdelta < 10 && hcaletot > 0.8 && hcaletot < 1.2  && hcernpe > 1.5 && pcaleprtracknorm< 0.2 && pcaleprtracknorm > 0.00001;

	   if(pid_cut)
	     {    evts++;
	    

	       h_ctime_ctime->Fill(ctime);
	       E_pi = sqrt(pow(pionMass,2) + pow(PgtrP,2));
	       z_had = E_pi/pkinomega;
	       h_z->Fill(z_had_all);
	       h_caletracknorm_ctime->Fill(pcaletracknorm);
	       h_caleprtracknorm_ctime->Fill(pcaleprtracknorm);
	       h_caletottracknorm_ctime->Fill(pcaletottracknorm);
	       h_shwr_vs_preshwr_notot_ctime->Fill(pcaleprtracknorm,pcaletracknorm-pcaleprtracknorm);
	       h_shwr_vs_preshwr_tot_ctime->Fill(pcaleprtracknorm,pcaletottracknorm-pcaleprtracknorm);
	       h_dp_vs_caletottracknorm_ctime->Fill(pcaletottracknorm,pdelta);
	       h_dp_vs_caletracknorm_ctime->Fill(pcaletracknorm,pdelta);
	       h_dp_vs_beta_ctime->Fill(pbeta,pdelta);
	       h_ctime_vs_caletottracknorm->Fill(ctime,pcaletottracknorm);

	     }
	 }

    
	 // cout << "===== final good events = "<<  evts << " ===== " << endl;
    



	 Int_t pion_evts=0;
	 //for (int ii=0; ii<nentriesD/100;  ii++){
	 for (int ii=0; ii<nentriesD;  ii++){
	   tt[i]->GetEntry(ii);
	   // if (ii % 700000 == 0) cout << ii*100/nentriesD << "   % of data done" << endl;


	   //pid_cut =  paeronpe>2.0 &&  pdelta >-10 && pdelta < 20  &&  pbeta > 0.5 && pbeta < 1.5 && hhodstarttime ==1 &&phodstarttime == 1 && hdipole==1 && pdipole ==1 && ctime>(max_value-1.5) && ctime <(max_value + 1.5)        ;//phgc>2
 
	   pion_cut =  paeronpe>2.0 &&  pdelta >-10 && pdelta < 20  &&  pbeta > 0.5 && pbeta < 1.5 && hhodstarttime ==1 &&phodstarttime == 1 && hdipole==1 && pdipole ==1 && ctime>(max_value-1.5) && ctime <(max_value + 1.5) &&   hbeta > 0.5 &&hbeta < 1.5  && hdelta> -10 && hdelta < 10 && hcaletot > 0.8 && hcaletot < 1.2  && hcernpe > 1.5  && pcaleprtracknorm< 0.3 && pcaleprtracknorm > 0.00001 &&pcaletottracknorm>0 && pcaletottracknorm<0.8 &&event_type==4;//&& phg>2.0;
	   if(pion_cut)

	     {    pion_evts++;
	    

	       h_ctime_ctime->Fill(ctime);
	       E_pi = sqrt(pow(pionMass,2) + pow(PgtrP,2));
	       z_had = E_pi/pkinomega;
	       h_z->Fill(z_had_all);
	       h_caletracknorm_pi->Fill(pcaletracknorm);
	       h_caleprtracknorm_pi->Fill(pcaleprtracknorm);
	       h_caletottracknorm_pi->Fill(pcaletottracknorm);
	       h_shwr_vs_preshwr_tot_pi->Fill(pcaleprtracknorm,pcaletottracknorm-pcaleprtracknorm);
	       h_dp_vs_beta_pi->Fill(pbeta,pdelta);
	       h_dp_vs_caletottracknorm_pi->Fill(pcaletottracknorm,pdelta);
	       h_ctime_vs_caletottracknorm_pi->Fill(ctime,pcaletottracknorm);
	     }
	 }
	 // cout << "===== final good coincidence events without hgcer = "<<  pion_evts << " ===== " << endl;
	 // gROOT->SetBatch(kTRUE);//kTRUE will not display and kFasle will display the plots

	 /*#include "plot.h"*/
	 TCanvas *c1 = new TCanvas("c1", "no_ctime_cut",1200,800); 

	 gStyle->SetOptFit();


	 TLine *line = new TLine(0,1,1,0);  
	 line->SetLineColor(kRed);
	 line->SetLineWidth(2);
      
	 c1->Divide(3,2);
	 c1->cd(1);gPad->SetGridx();
	 h_caletracknorm->Draw();
	 h_caletracknorm->SetLineWidth(2);
	 h_caletracknorm->SetLineColor(kBlue);
	 h_caletracknorm->SetTitle(Form("P.cal.etracknorm: No ctimecut Run: %d", runs[i]));
	 h_caletracknorm->GetXaxis()->SetTitle("P.cal.etracknorm");//============================================>try
	 h_caletracknorm->GetXaxis()->CenterTitle();
	 h_caletracknorm->GetXaxis()->SetTitleOffset(1.2);
	 h_caletracknorm->Fit("gaus","","QR",0.9,1.1);//h->Fit("gaus","V","E1",-1,1.5), h->Fit("function name", fit options,  drawing option, fit limits)

	 
 
	 Double_t mean_etracknorm =       h_caletracknorm->GetFunction("gaus")->GetParameter(1);	
	 Double_t mean_etracknorm_er =    h_caletracknorm->GetFunction("gaus")->GetParError(1);	
	 Double_t sigma_etracknorm =      h_caletracknorm->GetFunction("gaus")->GetParameter(2);	
	 Double_t sigma_etracknorm_er =   h_caletracknorm->GetFunction("gaus")->GetParError(2);	
	 
		       

	 c1->cd(2);gPad->SetGridx();
	 h_caletottracknorm->Draw();
	 h_caletottracknorm->SetLineWidth(2);
	 h_caletottracknorm->SetLineColor(kBlue);
	 h_caletottracknorm->SetTitle(Form("P.cal.etottracknorm: No ctimecut Run: %d", runs[i]));
	 h_caletottracknorm->GetXaxis()->SetTitle("P.cal.etottracknorm");
	 h_caletottracknorm->GetXaxis()->CenterTitle();
	 h_caletottracknorm->GetXaxis()->SetTitleOffset(1.2);
	 h_caletottracknorm->Fit("gaus","","QR",0.9,1.1);//h->Fit("gaus","V","E1",-1,1.5), h->Fit("function name", fit options,  drawing option, fit limits)
	 
	 Double_t mean_etottracknorm =           h_caletottracknorm->GetFunction("gaus")->GetParameter(1);	
	 Double_t mean_etottracknorm_er =        h_caletottracknorm->GetFunction("gaus")->GetParError(1);	
	 Double_t sigma_etottracknorm =          h_caletottracknorm->GetFunction("gaus")->GetParameter(2);	
	 Double_t sigma_etottracknorm_er =       h_caletottracknorm->GetFunction("gaus")->GetParError(2);	


	 


	 c1->cd(3);gPad->SetGridx();
	 h_caleprtracknorm->Draw();
	 h_caleprtracknorm->SetLineWidth(2);
	 h_caleprtracknorm->SetLineColor(kBlue);
	 h_caleprtracknorm->SetTitle(Form("P.cal.eprtracknorm: No ctimecut Run: %d", runs[i]));
	 h_caleprtracknorm->GetXaxis()->SetTitle("P.cal.eprtracknorm");
	 h_caleprtracknorm->GetXaxis()->CenterTitle();
	 h_caleprtracknorm->GetXaxis()->SetTitleOffset(1.2);

		
	 c1->cd(4);gPad->SetLogz();
	 h_shwr_vs_preshwr_tot->Draw("colz");
	 h_shwr_vs_preshwr_tot->SetLineWidth(2);
	 h_shwr_vs_preshwr_tot->SetLineColor(kBlue);
	 h_shwr_vs_preshwr_tot->SetTitle(Form("shower vs preshower  Tot: No ctimecut Run: %d", runs[i]));
	 h_shwr_vs_preshwr_tot->GetYaxis()->SetTitle("P.cal.etottracknorm - P.cal.eprtracknorm");
	 h_shwr_vs_preshwr_tot->GetYaxis()->CenterTitle();
	 h_shwr_vs_preshwr_tot->GetXaxis()->SetTitle("P.cal.eprtracknorm");
	 h_shwr_vs_preshwr_tot->GetXaxis()->CenterTitle();
	 h_shwr_vs_preshwr_tot->GetXaxis()->SetTitleOffset(1.2);
	 line->Draw("same");

	 c1->cd(5);gPad->SetLogz();
	 h_shwr_vs_preshwr_tot_ctime ->Draw("colz");
	 h_shwr_vs_preshwr_tot_ctime ->SetLineWidth(2);
	 h_shwr_vs_preshwr_tot_ctime ->SetLineColor(kBlue);
	 h_shwr_vs_preshwr_tot_ctime ->SetTitle(Form("shower vs preshower: Tot: ctimecut Run: %d", runs[i]));
	 h_shwr_vs_preshwr_tot_ctime ->GetYaxis()->SetTitle("P.cal.ettotracknorm - P.cal.eprtracknorm");
	 h_shwr_vs_preshwr_tot_ctime ->GetYaxis() ->CenterTitle();
	 h_shwr_vs_preshwr_tot_ctime ->GetXaxis()->SetTitle("P.cal.eprtracknorm");
	 h_shwr_vs_preshwr_tot_ctime ->GetXaxis()->CenterTitle();
	 h_shwr_vs_preshwr_tot_ctime ->GetXaxis()->SetTitleOffset(1.2); 
	 line->Draw("same");

	 c1->cd(6);gPad->SetLogz();
	 h_dp_vs_caletottracknorm_ctime->Draw("colz");
	 h_dp_vs_caletottracknorm_ctime->SetLineWidth(2);
	 h_dp_vs_caletottracknorm_ctime->SetLineColor(kBlue);
	 h_dp_vs_caletottracknorm_ctime->SetTitle(Form("dp vs caletottracknorm: ctimecut: Run: %d", runs[i]));
	 h_dp_vs_caletottracknorm_ctime->GetYaxis()->SetTitle("dp");
	 h_dp_vs_caletottracknorm_ctime->GetYaxis()->CenterTitle();
	 h_dp_vs_caletottracknorm_ctime->GetXaxis()->SetTitle("P.cal.etottracknrom");
	 h_dp_vs_caletottracknorm_ctime->GetXaxis()->CenterTitle();
	 h_dp_vs_caletottracknorm_ctime->GetXaxis()->SetTitleOffset(1.2);



	 //All Ctime variables_only

	 TCanvas *c2 = new TCanvas("c2", "ctime_cut",1000,600); 


	 c2->Divide(3,2);
	 c2->cd(1);gPad->SetGridx();
	 h_caletracknorm_ctime->Draw();
	 h_caletracknorm_ctime->SetLineWidth(2);
	 h_caletracknorm_ctime->SetLineColor(kBlue);
	 h_caletracknorm_ctime->SetTitle(Form("P.cal.etracknorm: ctimecut Run: %d", runs[i]));
	 h_caletracknorm_ctime->GetXaxis()->SetTitle("P.cal.etracknorm");//============================================>try
	 h_caletracknorm_ctime->GetXaxis()->CenterTitle();
	 h_caletracknorm_ctime->GetXaxis()->SetTitleOffset(1.2);
	 h_caletracknorm_ctime->Fit("gaus","","",0.9,1.1);//h->Fit("gaus","V","E1",-1,1.5), h->Fit("function name", fit options,  drawing option, fit limits)

	 Double_t mean_etracknorm_ctime =       h_caletracknorm_ctime->GetFunction("gaus")->GetParameter(1);	
	 Double_t mean_etracknorm_ctime_er =    h_caletracknorm_ctime->GetFunction("gaus")->GetParError(1);	
	 Double_t sigma_etracknorm_ctime =      h_caletracknorm_ctime->GetFunction("gaus")->GetParameter(2);	
	 Double_t sigma_etracknorm_ctime_er =   h_caletracknorm_ctime->GetFunction("gaus")->GetParError(2);	
	
			       

	 c2->cd(2);gPad->SetGridx();
	 h_caletottracknorm_ctime->Draw();
	 h_caletottracknorm_ctime->SetLineWidth(2);
	 h_caletottracknorm_ctime->SetLineColor(kBlue);
	 h_caletottracknorm_ctime->SetTitle(Form("P.cal.etottracknorm: ctimecut Run: %d", runs[i]));
	 h_caletottracknorm_ctime->GetXaxis()->SetTitle("P.cal.etottracknorm");
	 h_caletottracknorm_ctime->GetXaxis()->CenterTitle();
	 h_caletottracknorm_ctime->GetXaxis()->SetTitleOffset(1.2);
	 h_caletottracknorm_ctime->Fit("gaus","","",0.9,1.1);//h->Fit("gaus","V","E1",-1,1.5), h->Fit("function name", fit options,  drawing option, fit limits)

	 
	 Double_t mean_etottracknorm_ctime =           h_caletottracknorm_ctime->GetFunction("gaus")->GetParameter(1);	
	 Double_t mean_etottracknorm_ctime_er =        h_caletottracknorm_ctime->GetFunction("gaus")->GetParError(1);	
	 Double_t sigma_etottracknorm_ctime =          h_caletottracknorm_ctime->GetFunction("gaus")->GetParameter(2);	
	 Double_t sigma_etottracknorm_ctime_er =       h_caletottracknorm_ctime->GetFunction("gaus")->GetParError(2);	

	 



	 c2->cd(3);gPad->SetGridx();
	 h_caleprtracknorm_ctime->Draw();
	 h_caleprtracknorm_ctime->SetLineWidth(2);
	 h_caleprtracknorm_ctime->SetLineColor(kBlue);
	 h_caleprtracknorm_ctime->SetTitle(Form("P.cal.eprtracknorm: ctimecut Run: %d", runs[i]));
	 h_caleprtracknorm_ctime->GetXaxis()->SetTitle("P.cal.eprtracknorm");
	 h_caleprtracknorm_ctime->GetXaxis()->CenterTitle();
	 h_caleprtracknorm_ctime->GetXaxis()->SetTitleOffset(1.2);

		
	 c2->cd(4);gPad->SetLogz();
	 h_shwr_vs_preshwr_notot->Draw("colz");
	 h_shwr_vs_preshwr_notot->SetLineWidth(2);
	 h_shwr_vs_preshwr_notot->SetLineColor(kBlue);
	 h_shwr_vs_preshwr_notot->SetTitle(Form("shower vs preshower No tot: No ctimecut Run: %d", runs[i]));
	 h_shwr_vs_preshwr_notot->GetYaxis()->SetTitle("P.cal.etracknorm - P.cal.eprtracknorm");
	 h_shwr_vs_preshwr_notot->GetYaxis()->CenterTitle();
	 h_shwr_vs_preshwr_notot->GetXaxis()->SetTitle("P.cal.eprtracknorm");
	 h_shwr_vs_preshwr_notot->GetXaxis()->CenterTitle();
	 h_shwr_vs_preshwr_notot->GetXaxis()->SetTitleOffset(1.2);
	 line->Draw("same");


	 c2->cd(5);gPad->SetLogz();
	 h_shwr_vs_preshwr_notot_ctime ->Draw("colz");
	 h_shwr_vs_preshwr_notot_ctime ->SetLineWidth(2);
	 h_shwr_vs_preshwr_notot_ctime ->SetLineColor(kBlue);
	 h_shwr_vs_preshwr_notot_ctime ->SetTitle(Form("shower vs preshower: No tot: ctimecut Run: %d", runs[i]));
	 h_shwr_vs_preshwr_notot_ctime ->GetYaxis()->SetTitle("P.cal.etracknorm - P.cal.eprtracknorm");
	 h_shwr_vs_preshwr_notot_ctime ->GetYaxis() ->CenterTitle();
	 h_shwr_vs_preshwr_notot_ctime ->GetXaxis()->SetTitle("P.cal.eprtracknorm");
	 h_shwr_vs_preshwr_notot_ctime ->GetXaxis()->CenterTitle();
	 h_shwr_vs_preshwr_notot_ctime ->GetXaxis()->SetTitleOffset(1.2);
	 line->Draw("same");

	 c2->cd(6);gPad->SetLogz();
	 h_dp_vs_caletracknorm_ctime->Draw("colz");
	 h_dp_vs_caletracknorm_ctime->SetLineWidth(2);
	 h_dp_vs_caletracknorm_ctime->SetLineColor(kBlue);
	 h_dp_vs_caletracknorm_ctime->SetTitle(Form("dp vs caletracknorm: ctimecut Run: %d", runs[i]));
	 h_dp_vs_caletracknorm_ctime->GetYaxis()->SetTitle("dp");
	 h_dp_vs_caletracknorm_ctime->GetYaxis()->CenterTitle();
	 h_dp_vs_caletracknorm_ctime->GetXaxis()->SetTitle("P.cal.etracknrom");
	 h_dp_vs_caletracknorm_ctime->GetXaxis()->CenterTitle();
	 h_dp_vs_caletracknorm_ctime->GetXaxis()->SetTitleOffset(1.2);

     
	 //Pions only

	 TCanvas *c3 = new TCanvas("c3", "good_pions",1200,800); 

	 c3->Divide(3,2);

	 c3->cd(1);
	 gPad->Divide(2,1);		       
	 gPad->cd(1);//gPad->SetGridx();
	 h_caletottracknorm_pi->Draw();
	 h_caletottracknorm_pi->SetLineWidth(2);
	 h_caletottracknorm_pi->SetLineColor(kBlue);
	 h_caletottracknorm_pi->SetTitle(Form("P.cal.etottracknorm: Pion: Run: %d", runs[i]));
	 h_caletottracknorm_pi->GetXaxis()->SetTitle("P.cal.etottracknorm");
	 h_caletottracknorm_pi->GetXaxis()->CenterTitle();
	 h_caletottracknorm_pi->GetXaxis()->SetTitleOffset(1.2);


	 c3->cd(1);gPad->cd(2);//gPad->SetGridx();
	 h_caleprtracknorm_pi->Draw();
	 h_caleprtracknorm_pi->SetLineWidth(2);
	 h_caleprtracknorm_pi->SetLineColor(kBlue);
       	 h_caleprtracknorm_pi->SetTitle(Form("P.cal.eprtracknorm: Pion: Run: %d", runs[i]));
	 h_caleprtracknorm_pi->GetXaxis()->SetTitle("P.cal.eprtracknorm");
	 h_caleprtracknorm_pi->GetXaxis()->CenterTitle();
	 h_caleprtracknorm_pi->GetXaxis()->SetTitleOffset(1.2);




	 //  h_caletottracknorm_pi->Fit("gaus","","",0.9,1.1);//h->Fit("gaus","V","E1",-1,1.5), h->Fit("function name", fit options,  drawing option, fit limits)
	 // c3->cd(2);gPad->SetGridx();
	 // h_caleprtracknorm_pi->Draw();
	 // h_caleprtracknorm_pi->SetLineWidth(2);
	 // h_caleprtracknorm_pi->SetLineColor(kBlue);
	 // h_caleprtracknorm_pi->SetTitle(Form("P.cal.eprtracknorm: pion:  Run: %d", runs[i]));
	 // h_caleprtracknorm_pi->GetXaxis()->SetTitle("P.cal.eprtracknorm");
	 // h_caleprtracknorm_pi->GetXaxis()->CenterTitle();
	 // h_caleprtracknorm_pi->GetXaxis()->SetTitleOffset(1.2);


	 c3->cd(2);gPad->SetLogz();
	 h_dp_vs_caletottracknorm_ctime->Draw("colz");
	 h_dp_vs_caletottracknorm_ctime->SetLineWidth(2);
	 h_dp_vs_caletottracknorm_ctime->SetLineColor(kBlue);
	 h_dp_vs_caletottracknorm_ctime->SetTitle(Form("dp vs caletottracknorm: ctimecut: Run: %d", runs[i]));
	 h_dp_vs_caletottracknorm_ctime->GetYaxis()->SetTitle("dp");
	 h_dp_vs_caletottracknorm_ctime->GetYaxis()->CenterTitle();
	 h_dp_vs_caletottracknorm_ctime->GetXaxis()->SetTitle("P.cal.etottracknrom");
	 h_dp_vs_caletottracknorm_ctime->GetXaxis()->CenterTitle();
	 h_dp_vs_caletottracknorm_ctime->GetXaxis()->SetTitleOffset(1.2);

        
	 c3->cd(3);gPad->SetLogz();
	 h_shwr_vs_preshwr_tot_pi->Draw("colz");
	 h_shwr_vs_preshwr_tot_pi->SetLineWidth(2);
	 h_shwr_vs_preshwr_tot_pi->SetLineColor(kBlue);
	 h_shwr_vs_preshwr_tot_pi->SetTitle(Form("shower vs preshower Tot: Pion: Run: %d", runs[i]));
	 h_shwr_vs_preshwr_tot_pi->GetYaxis()->SetTitle("P.cal.etottracknorm - P.cal.eprtracknorm");
	 h_shwr_vs_preshwr_tot_pi->GetYaxis()->CenterTitle();
	 h_shwr_vs_preshwr_tot_pi->GetXaxis()->SetTitle("P.cal.eprtracknorm");
	 h_shwr_vs_preshwr_tot_pi->GetXaxis()->CenterTitle();
	 h_shwr_vs_preshwr_tot_pi->GetXaxis()->SetTitleOffset(1.2);


	 // c3->cd(4);gPad->SetLogz();gPad->SetGridx();
	 // h_dp_vs_beta_pi->Draw("colz");
	 // h_dp_vs_beta_pi->SetLineWidth(2);
	 // h_dp_vs_beta_pi->SetLineColor(kBlue);
	 // h_dp_vs_beta_pi->SetTitle(Form("delta vs beta: Pion: Run: %d", runs[i]));
	 // h_dp_vs_beta_pi->GetYaxis()->SetTitle("P.gtr.dp");
	 // h_dp_vs_beta_pi->GetYaxis()->CenterTitle();
	 // h_dp_vs_beta_pi->GetXaxis()->SetTitle("P.gtr.beta");
	 // h_dp_vs_beta_pi->GetXaxis()->CenterTitle();
	 // h_dp_vs_beta_pi->GetXaxis()->SetTitleOffset(1.2);

	 c3->cd(4);gPad->SetLogz();
	 h_ctime_vs_caletottracknorm_nopid->Draw("colz");
	 h_ctime_vs_caletottracknorm_nopid->SetLineWidth(2);
	 h_ctime_vs_caletottracknorm_nopid->SetLineColor(kBlue);
	 h_ctime_vs_caletottracknorm_nopid->SetTitle(Form("Pcaletottracknorm vs ctime: All Evts, no pid cut: Run: %d", runs[i]));
	 h_ctime_vs_caletottracknorm_nopid->GetYaxis()->SetTitle("P.cal.etottracknorm");
	 h_ctime_vs_caletottracknorm_nopid->GetYaxis()->CenterTitle();
	 h_ctime_vs_caletottracknorm_nopid->GetXaxis()->SetTitle("ctime (ns)");
	 h_ctime_vs_caletottracknorm_nopid->GetXaxis()->CenterTitle();
	 h_ctime_vs_caletottracknorm_nopid->GetXaxis()->SetTitleOffset(1.2);


	 c3->cd(5);gPad->SetLogz();gPad->SetGridx();gPad->SetGridy();
	 h_ctime_vs_caletottracknorm->Draw("colz");
	 h_ctime_vs_caletottracknorm->SetLineWidth(2);
	 h_ctime_vs_caletottracknorm->SetLineColor(kBlue);
	 h_ctime_vs_caletottracknorm->SetTitle(Form("E/P vs ctime: no Pion selection: Run: %d", runs[i]));
	 h_ctime_vs_caletottracknorm->GetXaxis()->SetTitle("ctime (ns)");
	 h_ctime_vs_caletottracknorm->GetYaxis()->CenterTitle();
	 h_ctime_vs_caletottracknorm->GetYaxis()->SetTitle("P.cal.etottracknorm");
	 h_ctime_vs_caletottracknorm->GetXaxis()->CenterTitle();
	 h_ctime_vs_caletottracknorm->GetXaxis()->SetTitleOffset(1.2);

	 c3->cd(6);gPad->SetLogz();gPad->SetGridx();gPad->SetGridy();
	 h_ctime_vs_caletottracknorm_pi->Draw("colz");
	 h_ctime_vs_caletottracknorm_pi->SetLineWidth(2);
	 h_ctime_vs_caletottracknorm_pi->SetLineColor(kBlue);
	 h_ctime_vs_caletottracknorm_pi->SetTitle(Form("E/P vs ctime: Pion selection: Run: %d", runs[i]));
	 h_ctime_vs_caletottracknorm_pi->GetXaxis()->SetTitle("ctime (ns)");
	 h_ctime_vs_caletottracknorm_pi->GetYaxis()->CenterTitle();
	 h_ctime_vs_caletottracknorm_pi->GetYaxis()->SetTitle("P.cal.etottracknorm");
	 h_ctime_vs_caletottracknorm_pi->GetXaxis()->CenterTitle();
	 h_ctime_vs_caletottracknorm_pi->GetXaxis()->SetTitleOffset(1.2);


	 ofstream txtfile ("txt_fall/pcal_mean_noctime.txt", ios::app);
	 txtfile<<runs[i]<<" "<<setprecision(5)<<"  "<<fixed<<"  "<<mean_etottracknorm<<"  "<<"  "<<mean_etottracknorm_er<<"  "<<"  "<<sigma_etottracknorm<<"  "<<"  "<<sigma_etottracknorm_er<<"  "<<mean_etracknorm<<"  "<<"  "<<mean_etracknorm_er<<"  "<<"  "<<sigma_etracknorm<<"  "<<"  "<<sigma_etracknorm_er<<"  "<<endl;

	 ofstream txtfile1 ("txt_fall/pcal_mean_withctime.txt", ios::app);
	 txtfile1<<runs[i]<<" "<<setprecision(5)<<"  "<<fixed<<"  "<<mean_etottracknorm_ctime<<"  "<<"  "<<mean_etottracknorm_ctime_er<<"  "<<"  "<<sigma_etottracknorm_ctime<<"  "<<"  "<<sigma_etottracknorm_ctime_er<<"  "<<mean_etracknorm_ctime<<"  "<<"  "<<mean_etracknorm_ctime_er<<"  "<<"  "<<sigma_etracknorm_ctime<<"  "<<"  "<<sigma_etracknorm_ctime_er<<"  "<<endl;

		
      
	 // ff->cd();
	 //ff->Write();
    
	 c1->GetFrame()->SetBorderSize(12);
	 c1->Modified();
	 c2->GetFrame()->SetBorderSize(12);
	 c2->Modified();
	 c3->GetFrame()->SetBorderSize(12);
	 c3->Modified();

    
	 c1->SaveAs(Form("pdf_nov25_fall_final/1cal_fall_noctime_%d.pdf)",runs[i]));
	 c2->SaveAs(Form("pdf_nov25_fall_final/1cal_fall_ctime_%d.pdf)",runs[i]));
	 c3->SaveAs(Form("pdf_nov25_fall_final/1cal_fall_pion_%d.pdf)",runs[i]));

	 c1->~TCanvas();	
	 c2->~TCanvas();
	 c3->~TCanvas();
	 delete c1;
	 delete c2;
	 delete c3;
    	
  }
}


//delete tcanvas;
//delete tgraph


