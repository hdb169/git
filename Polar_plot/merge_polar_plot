void test_merge_polar(){
  gStyle->SetOptStat(1000111);

  TList *list = new TList;
  //Int_t runs[]={7809,7808,7593};
  Int_t runs[]={11,21,14,24,17,27,110,210};
  //TString names[]={"Q2_4_x_35_z07+","Q2_4_x_35_z07-", "Q2_4_x_35_z06+","Q2_4_x_35_z06-", "Q2_4_x_35_z05+","Q2_4_x_35_z05-", "Q2_4_x_35_z04+","z04-"};


  //{6123,   6020,6021,6022,6023,6024,6025,6026,6027,6028,6029,6030,6031,6032,6033,6034,6035,6036,6038,6039,6040,6041,6042,6043,6044,6045,6046,6049,6050,6051,6052,6053,6054,6055,6056,6057,6058,6059,6060,6061,6062,6063,6064,6065,6066,6067,6068,6070,6071,6080,6081,6082};//,6083,6084,6085,6086,6087,6088,6089,6090,6091,6093,6094,6095,6096,6097,6098,6099,6101,6102,6103,6104,6105,6106,6109,6110,6111,6112,6114,6115,6116,6117,6118,6119,6120,6121,6122/*,6123*/,6124,6125,6126,6127,6128,6129,6130,6132,6133,6135,6136,6137,6138,6139,6140,6141,6142,6144,6145,6146,6154,6155,6163,6164,6166,6168,6169,6170,6171,6172,6174,6175,6177,6178,6179,6180,6181,6182,6183,6184,6185,6186,6187,6188,6189,6190,6192,6193,6194,6195,6196,6197,6198,6199,6200,6201,6202,6203,6204,6205,6208,6209,6210,6211,6212,6213,6214,6215,6216,6217,6219,6220,6221,6222,6223,6224,6225,6237,6240,6241,6242,6243,6244,6245,6246,6247,6248,6249,6250,6251,6252,6253,6254,6255,6256,6257,6258,6259,6260,6261,6262,6263,6264,6265,6266,6267,6270,6271,6272,6273,6274,6275,6276,6281,6282,6284,6285,6286,6287,6288,6289,6290,6291,6292,6293,6294,6295,6296,6297,6298,6299,6300,6301,6302,6304,6305,6306,6307,6308,6309,6310,6311,6312,6313,6314,6315,6316,6317,6318,6322,6323,6325,6326,6327,6328,6329,6331,6332,6334,6335,6336,6337,6338,6339,6340,6341,6342,6343,6344,6345,6346,6347,6348,6349,6350,6351,6352,6353,6354,6355,6356,6357,6358,6359,6360,6363,6364,6365,6367,6368,6370,6371,6372,6373,6374,6375,6376,6377,6378,6379,6380,6381,6382,6383,6385,6386,6387,6388,6389,6390,6391,6393,6394,6395,6396,6397,6398,6399,6400,6401,6402,6403,6404,6405,6406,6407,6408,6410,6411,6412,6413,6415,6416,6417,6419,6421,6422,6423,6425,6426,6427,6428,6429,6430,6431,6432,6433,6434,6435,6436,6439,6440,6441,6442,6443,6444,6445,6446,6447,6448,6451,6452,6453,6454,6455,6456,6459,6460,6461,6462,6463,6464,6465,6466,6467,6468,6469,6470,6471,6472,6473,6474,6475,6476,6477,6478,6479,6482,6483,6484,6485,6486,6487,6488,6489,6490,6491,6493,6494,6495,6496,6497,6498,6499,6500,6501,6502,6503,6504,6506,6507,6509,6510,6512,6513,6514,6515,6516,6517,6518,6519,6520,6521,6522,6523,6524,6525,6526,6527,6528,6529,6531,6532,6533,6534,6535,6536,6537,6538,6539,6541,6542,6543,6544,6545,6546,6547,6548,6549,6550,6551,6552};//,7593,7594,7595,7596,7597,7599,7600,7601,7602,7603,7604,7605,7606,7607,7608,7609,7610,7611,7612,7613,7614,7615,7616,7617,7618,7619,7620,7621,7622,7623,7625,7626,7627,7628,7629,7630,7631,7632,7633,7634,7635,7636,7637,7638,7639,7640,7641,7642,7643,7644,7645,7646,7647,7648,7649,7650,7651,7652,7654,7655,7657,7658,7659,7660,7661,7662,7663,7666,7667,7668,7669,7670,7671,7672,7673,7674,7675,7676,7677,7678,7679,7680,7681,7682,7684,7685,7686,7687,7688,7689,7690,7692,7694,7695,7697,7698,7699,7702,7703,7706,7707,7708,7709,7710,7711,7712,7713,7714,7715,7716,7717,7718,7719,7720,7721,7722,7723,7724,7725,7727,7728,7729,7730,7733,7735,7736,7737,7738,7739,7740,7741,7742,7743,7747,7748,7749,7750,7751,7752,7753,7754,7755,7757,7758,7759,7760,7762,7763,7765,7766,7768,7769,7770,7771,7772,7773,7774,7775,7776,7777,7778,7779,7781,7782,7783,7784,7785,7786,7787,7790,7791,7792,7793,7794,7796,7797,7798,7799,7800,7801,7802,7803,7804,7805,7806,7807,7808,7809,7811,7812,7813,7814,7815,7816,7817,7819,7820};



  TH1F *hist_ptsinphi = new TH1F("hist_ptsinphi","pt sin(phi) (GeV);pt sinc(phi) (GeV);Entries  ",100,-1.5,1.5);
  TH1F *hist_ptcosphi = new TH1F("hist_ptcosphi","pt cos(phi) (GeV);pt cos(phi) (GeV);Entries ",100,-1.5,1.5);
  TH1F *hist_pt = new TH1F("hist_pt","pt (GeV);pt(GeV);Entries  ",100,-1,2);
  TH1F *hist_rf = new TH1F("hist_rf","RFTime;RFTime;Entries  ",100,0,4);

  Int_t NRUNS = sizeof(runs)/sizeof(*runs);
  TH1F *histpt[NRUNS];

  TGraphPolar *g_ptpolar[NRUNS];
  std::vector<double> pt_vec,pt_vec_err,phi_vec,err_vec;
  double paero,pbeta,pdelta,hdelta,ctime,hcernpeSum,hdipole,pdipole,hbeta,pcal,hcal,hcernpe,phi,theta,mom,pt,ptsinphi,ptcosphi,rf_pion,phodfphitstime,prftdctime,offsetrf,eventtype,hxptar,hyptar,pxptar,pyptar;


  for(int r=0;r<NRUNS;r++){
    histpt[r] = new TH1F(Form("histpt[%d]",r)," pt = mom * sin theta (GeV) plot; pt (GeV); Entries  ", 100, -1, 2);  
#include "offsetrfJune.h"


    
    TFile *f1 = new TFile(Form("/v/lustre19/expphy/volatile/hallc/c-csv/hdbhatt/ROOTfiles/ptsin/kin_%d.root",runs[r]));
    TFile *f2 = new TFile(Form("/u/group/c-csv/hdbhatt/my_analysis/yield/factorization/root_sincos/pt_sincos_%d.root",runs[r]),"RECREATE");
    // TFile *f1 = new TFile(Form("/v/lustre19/expphy/volatile/hallc/c-csv/hdbhatt/ROOTfiles/ptsin/coin_replay_production_%d_-1.root",runs[r]));

    cout<< "Opening Run Num = "<< runs[r] <<endl; 
    
    if(f1->IsZombie()){
      std::cout << "Error opening file "<< std::endl;
      continue;
    }

    TTree * tt = (TTree*)f1->Get("T");

    Long64_t nentriesD = tt->GetEntries();
  
    tt->SetBranchAddress("H.dc.InsideDipoleExit",&hdipole);
    tt->SetBranchAddress("P.dc.InsideDipoleExit",&pdipole);
    tt->SetBranchAddress("P.hod.fpHitsTime", &phodfphitstime);                  
    tt->SetBranchAddress("T.coin.pRF_tdcTime", &prftdctime); 
    tt->SetBranchAddress("P.aero.npeSum", &paero);
    tt->SetBranchAddress("P.gtr.beta", &pbeta);                                                                       
    tt->SetBranchAddress("P.gtr.dp", &pdelta);         
    tt->SetBranchAddress("CTime.ePiCoinTime_ROC2", &ctime);
    tt->SetBranchAddress("H.cer.npeSum", &hcernpeSum); 
    tt->SetBranchAddress("H.gtr.beta", &hbeta); 
    tt->SetBranchAddress("H.gtr.dp", &hdelta);                                                                            
    tt->SetBranchAddress("P.aero.npeSum", &paero);
    tt->SetBranchAddress("P.cal.etottracknorm", &pcal);
    tt->SetBranchAddress("H.cal.etottracknorm", &hcal);
    tt->SetBranchAddress("H.cer.npe", &hcernpe);
    tt->SetBranchAddress("P.kin.secondary.ph_xq", &phi);
    tt->SetBranchAddress("P.kin.secondary.th_xq", &theta);
    tt->SetBranchAddress("P.gtr.p", &mom);                                                                            
    tt->SetBranchAddress("CTime.ePiCoinTime_ROC2", &ctime);                                                                            
    tt->SetBranchAddress("g.evtyp", &eventtype);
    tt->SetBranchAddress("H.gtr.th",&hxptar);
    tt->SetBranchAddress("H.gtr.ph",&hyptar);
    tt->SetBranchAddress("P.gtr.th",&pxptar);
    tt->SetBranchAddress("P.gtr.ph",&pyptar);

    for (int kk=0; kk<nentriesD;  kk++){
      tt->GetEntry(kk);
      rf_pion = (fmod(-prftdctime+phodfphitstime+ offsetrf ,4.008));


      if(pdelta>-10&&pdelta<20&&hdelta>-8&&hdelta<8&&pcal<0.7&&hcal>0.75&&hbeta>0.5&&pbeta>0.5&&paero>4&&ctime>42&&ctime<45  /*&&rf_pion>0.5&&rf_pion<1.5*/&&eventtype>3&& pxptar>-0.05&&pxptar<0.05&&pyptar>-0.05&&pyptar<0.05&& hxptar>-0.08&&hxptar<0.08&&hyptar>-0.04&&hyptar<0.04&&hdipole==1&&pdipole==1){
	pt=mom*sin(theta);
	pt_vec.push_back(pt);
	phi_vec.push_back(phi);
	err_vec.push_back(0);
	ptsinphi=pt*sin(phi);
	ptcosphi=pt*cos(phi);
	hist_pt->Fill(pt);
	hist_ptsinphi->Fill(ptsinphi);
	hist_ptcosphi->Fill(ptcosphi);
	histpt[r]->Fill(pt);
	hist_rf->Fill(rf_pion);
      }

    }
    list->Add(histpt[r]);

    int n_counts = (int) pt_vec.size();
    g_ptpolar[r] = new TGraphPolar(n_counts,&phi_vec[0],&pt_vec[0],&err_vec[0],&err_vec[0]);
    // g_ptpolar[r]->Draw("AP");
    phi_vec.clear();
    pt_vec.clear();
    err_vec.clear();
    // cout<< runs[r]<<"  "<<n_counts<<endl;


    TCanvas *c1 = new TCanvas("c1","c1",800,800);
    c1->Divide(1,1);
    c1->cd(1);gPad->SetLogy();
    hist_pt->Draw();
    hist_pt->Draw("hist");
    hist_pt->SetLineWidth(5);
    hist_pt->GetXaxis()->CenterTitle();
    hist_pt->GetYaxis()->CenterTitle();
    hist_pt->Write();
    /*
      c1->cd(2);//gPad->SetLogy();
      hist_rf->Draw();
      hist_rf->Draw("hist");
      hist_rf->SetLineWidth(2);
      hist_rf->GetXaxis()->CenterTitle();
      hist_rf->GetYaxis()->CenterTitle();
      hist_rf->Write();
    
      c1->cd(3);
      hist_ptsinphi->Draw();
      hist_ptsinphi->Draw("hist");
      hist_ptsinphi->SetLineWidth(2);
      hist_ptsinphi->GetXaxis()->CenterTitle();
      hist_ptsinphi->GetYaxis()->CenterTitle();
      hist_ptsinphi->Write();
  
      c1->cd(4);
      hist_ptcosphi->Draw();
      hist_ptcosphi->Draw("hist");
      hist_ptcosphi->SetLineWidth(2);
      hist_ptcosphi->GetXaxis()->CenterTitle();
      hist_ptcosphi->GetYaxis()->CenterTitle();
      hist_ptcosphi->Write();
    */

  
    c1->SaveAs(Form("ptplots/pthist_%d.pdf",runs[r]));



  }//runs
  TLegend *legend1=new TLegend(.9,.5,.75,.75); 


  TCanvas *c_ptpolar = new TCanvas("c_ptpolar","",1200,1200);
  //TMultiGraph *mg = new TMultiGraph("mg","mg");
  for(int r=0;r<NRUNS;r++){
    // mg->Add(g_ptpolar[r],"p");
    //g_ptpolar[r]->SetMarkerColor(46); 
    g_ptpolar[r]->SetMarkerColor(r+2);  
    g_ptpolar[r]->SetMarkerStyle(4);
    g_ptpolar[r]->SetTitle("Polar Plot : pt sin theta vs pt cos theta (Data)");
    g_ptpolar[r]->Draw("AP");
  }
  //legend1->AddEntry(g_ptpolar[0],"Q2 = 4, x = 0.35, z = 0.7 +","L");
  //legend1->AddEntry(g_ptpolar[1],"Q2 = 4, x = 0.35, z = 0.7 -","L");
  // legend1->AddEntry(histpt[2],"Q2 = 4, x = 0.35, z = 0.6 +","L");
  // legend1->AddEntry(histpt[3],"Q2 = 4, x = 0.35, z = 0.6 -","L");
  // legend1->AddEntry(histpt[4],"Q2 = 4, x = 0.35, z = 0.5 +","L");
  // legend1->AddEntry(histpt[5],"Q2 = 4, x = 0.35, z = 0.5 -","L");
  // legend1->AddEntry(histpt[6],"Q2 = 4, x = 0.35, z = 0.4 +","L");
  // legend1->AddEntry(histpt[7],"Q2 = 4, x = 0.35, z = 0.4 -","L");
  // legend1->SetBorderSize(0); 
  // legend1->SetFillColor(0); 
  //legend1->Draw(); 
  // // mg->Draw("AP");


  c_ptpolar->SaveAs("ptplots/polar_kin12_pippim_z07-04.pdf");
  // g_ptpolar->Draw("p");
  // g_ptpolar->SetMarkerStyle(22);
  // c_ptpolar->SaveAs(Form("ptplots/plorplot_%d.pdf",runs[r]));
  //g_ptpolar->Write();
  
  TLegend *legend=new TLegend(.7,.8,.49,.59); 
  TH1F *ptplots = (TH1F*)histpt[0]->Clone("ptplots");
  ptplots->Reset();
  ptplots->Merge(list);
  ptplots->GetXaxis()->CenterTitle();
  ptplots->GetYaxis()->CenterTitle();
  TCanvas *d1 = new TCanvas("d1","",800,800);
  d1->Divide(1,1);
  d1->cd(1);gPad->SetLogy();
  //ptplots->Draw("hist");
  ptplots->SetLineWidth(8);  
  ptplots->SetLineColor(kBlue);
  //legend->AddEntry(ptplots,"Q2 = 4, x = 0.35, z = 0.7 +","L");

  for(int r=0;r<NRUNS;r++){
    histpt[r]->Draw("hist same");
    histpt[r]->SetLineColor(r+2);
    histpt[r]->SetLineWidth(8);
    histpt[r]->Write();  
    histpt[0]->GetXaxis()->CenterTitle();
    histpt[0]->GetYaxis()->CenterTitle();    

  }
  legend->AddEntry(histpt[0],"Q2 = 4, x = 0.35, z = 0.7 +","L");
  legend->AddEntry(histpt[1],"Q2 = 4, x = 0.35, z = 0.7 -","L");
  legend->AddEntry(histpt[2],"Q2 = 4, x = 0.35, z = 0.6 + ","L");
  legend->AddEntry(histpt[3],"Q2 = 4, x = 0.35, z = 0.6 -","L");
  legend->AddEntry(histpt[4],"Q2 = 4, x = 0.35, z = 0.5 +","L");
  legend->AddEntry(histpt[5],"Q2 = 4, x = 0.35, z = 0.5 -","L");
  legend->AddEntry(histpt[6],"Q2 = 4, x = 0.35, z = 0.4 +","L");
  legend->AddEntry(histpt[7],"Q2 = 4, x = 0.35, z = 0.4 -","L");
  legend->SetBorderSize(0); 
  legend->SetFillColor(0); 
  legend->Draw(); 

  d1->SaveAs("ptplots/kin12_pippim_z07-04.pdf");
  
  // cout<<ptplots->GetEntries()<<"\t"<<histpt[0]->GetEntries()<<"\t"<<histpt[1]->GetEntries()<<endl;

 

  
}
