#define NRUNS 11
void deepak_carlos(){
    ofstream txtfile("lt_dd.txt",ios::app);

  Int_t rruns[NRUNS] =  {6429, 6430, 6431, 6432, 6433, 6459, 6460, 6461, 6462, 6463, 6464 };
  for (int i=0;i<NRUNS;i++){
    TString filename = Form("/home/hdbhatt/Desktop/new_hcana_lt/tr_lt/ROOTfiles/coin_replay_production_%d_-1.root",rruns[i]);
    TFile *f = new TFile(filename, "READ");
    //cout<< "Opening Run Num = "<<rruns[i] <<endl; 
    if(f->IsZombie()){
      std::cout << "Error opening file "<< std::endl;
      //exit(-1);
      continue;
    }
    
    TTree *tdata = (TTree*) f->Get("T");
    TTree *tscal = (TTree*) f->Get("TSP");
    double setCur;
    double th_current = 3.; //3 uA
    double prev_trig6=0.;
    double tot_trig6=0.;
    double total_ptrig6_cut=0.;

    //===========SCALER==============

    double evNum;
    double bcm1;
    double pTRIG6;
    //double setCur;

    TH1F *hcurrent = new TH1F("current","",1000, 4, 80);

    tscal->SetBranchAddress("evNumber", &evNum);
    tscal->SetBranchAddress("P.BCM1.scalerCurrent", &bcm1);
    tscal->SetBranchAddress("P.pTRIG6.scaler", &pTRIG6);

    const int  tscal_entries =tscal->GetEntries();
    int ev_flag[tscal_entries];
    int scal_evt_num[tscal_entries];
 
    for (int j = 0; j < tscal_entries; j++){ 
      tscal->GetEntry(j);
      hcurrent->Fill(bcm1);
    }
      setCur = hcurrent->GetBinCenter(hcurrent->GetMaximumBin());

    for (int i = 0; i < tscal_entries; i++){ 
      tscal->GetEntry(i);
      ev_flag[i] = 0;
      scal_evt_num[i] = evNum;
      tot_trig6=pTRIG6;
      if(abs(setCur - bcm1) < th_current){
      // if(bcm1 > th_current){
	ev_flag[i] = 1; // turn the flag on
	total_ptrig6_cut = total_ptrig6_cut + (pTRIG6-prev_trig6);
      }
      prev_trig6 = pTRIG6;
    }

    //===========SCALER-END==========


    //===========DATA=============

    double evtyp;
    double evNum_data;
    double ptrig6_data;    

    tdata->SetBranchAddress("g.evtyp", &evtyp);
    tdata->SetBranchAddress("g.evnum", &evNum_data);
    tdata->SetBranchAddress("T.coin.pTRIG6_ROC2_tdcTimeRaw",&ptrig6_data);

    double acc_trig6_cut = 0.;
    int scal = 0;   //scaler read counter
    const int  tdata_entries =tdata->GetEntries();
 
    for (int j = 0; j < tdata_entries; j++){
      tdata->GetEntry(j);
      if(ev_flag[scal]==1){
	if(ptrig6_data> 0.&&evtyp>3){	//if(ptrig6_data!= 0.&&evtyp>3){

	  acc_trig6_cut++;//count the accepted ptrig6 events
	}
      }//end bcm flag

      //cout << evNum_data <<"   "<< scal_evt_num[scal] << "   "<<scal << endl;
      if(evNum_data ==  scal_evt_num[scal]){
	scal++;    
      }
    } //end event entry loop

    //============DATA-END==========
    
    double comp_lt = acc_trig6_cut / total_ptrig6_cut;    
    // double comp_lt_error =  TMath::Sqrt(acc_trig6_cut) / total_ptrig6_cut;//carlos
    double comp_lt_error =  comp_lt * TMath::Sqrt(1/acc_trig6_cut+ 1/total_ptrig6_cut);

    // cout<<rruns[i]<<"   "<<"acc_trig6_cut = "<<acc_trig6_cut<<"   "<<"total_ptrig6_cut = "<<total_ptrig6_cut<<"   "<<"comp_lt = "<<comp_lt<<"   "<<"comp_lt_error = "<<comp_lt_error<<endl;
    cout<<rruns[i]<<" \t  "<<acc_trig6_cut<<" \t "<<total_ptrig6_cut<<" \t   "<<comp_lt<<" \t  "<<comp_lt_error << endl;
    txtfile<<rruns[i]<<" \t  "<<acc_trig6_cut<<" \t "<<total_ptrig6_cut<<" \t   "<<comp_lt<<" \t  "<<comp_lt_error << endl;


    
  }
}
