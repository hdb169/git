#define NRUNS 11

void livetime_mark_method(){//Logentry 127,Jun05
    ofstream txtfile("mark_method.txt",ios::app);
  TGraphErrors * gr = new TGraphErrors();

  Int_t runs[NRUNS]= {6429, 6430, 6431, 6432, 6433, 6459, 6460, 6461, 6462, 6463, 6464 };
  Int_t rate[NRUNS] = {522, 519, 518, 396, 267, 421, 423, 370, 327, 238, 242};
  gROOT->SetBatch(kTRUE);
  
  for(Int_t r=0; r<NRUNS; r++){
    TString filename  = Form("/home/hdbhatt/Desktop/new_hcana_lt/tr_lt/ROOTfiles/coin_replay_production_%d_-1.root", runs[r]);
    TFile *f = new TFile(filename, "READ");
    //cout<< "Opening Run Num = "<< runs[r] <<endl; 
    if(f->IsZombie()){
      std::cout << "Error opening file "<< std::endl;
      //exit(-1);
      continue;
    }
    TTree * tt = (TTree *)f->Get("T");
    TTree * ss = (TTree *)f->Get("TSP");


    TH1F *hcurrent = new TH1F("current","",100, 10, 100);
    TH1F *hpbeta = new TH1F("beta","",100, -100, 100);
    TH1F *hpedtmtdctimeraw = new TH1F("edtm_tdctime_raw","",100, -100, 100000000);



    double data_eventnum,ngcer,pcaletottrack,pcaleprtrack,pcaletotnorm,pdelta,xptar,ytar,pdcntrack,eventtype,phodbetanotrack,phodgoodscinhit,pdctnhit,edtmtdctimeraw,ptrig6tdctimeraw,ptrig2tdctimeraw,pelcleantdctimeraw;

    double scaler_eventnum,bcm1charge,bcm1current,scaler1MHztime,scaler1MHztimecut,bcm1chargecut,s1xscaler,s1yscaler,s2xscaler,s2yscaler,ptrig1scaler,ptrig2scaler,ptrig3scaler,ptrig4scaler,ptrig6scaler,pedtmscaler,pelcleanscaler,pl1acceptscaler,edtmtdctime, mult;

    double  current_bcmcut, current_nobcmcut, ptrig3scalercut, ptrig4scalercut, ptrig5scalercut, ptrig6scalercut,pbeta,pedtmscalercut;
    double setCur ;
    double th_current = 3.; //3 uA

    tt->SetBranchAddress("g.evnum",&data_eventnum);
    tt->SetBranchAddress("P.cal.etottracknorm",&pcaletottrack);
    tt->SetBranchAddress("P.cal.eprtracknorm",&pcaleprtrack);
    tt->SetBranchAddress("g.evtyp", &eventtype);
    tt->SetBranchAddress("T.coin.pEDTM_tdcTime",&edtmtdctime);
    tt->SetBranchAddress("T.coin.pEDTM_tdcTimeRaw",&edtmtdctimeraw);
    tt->SetBranchAddress("T.coin.pTRIG6_ROC2_tdcTimeRaw",&ptrig6tdctimeraw);
    tt->SetBranchAddress("T.coin.pTRIG2_ROC2_tdcTimeRaw",&ptrig2tdctimeraw);
    tt->SetBranchAddress("T.coin.pEL_CLEAN_ROC2_tdcTimeRaw",&pelcleantdctimeraw);
    tt->SetBranchAddress("T.coin.pT2_tdcMultiplicity",&mult);
    tt->SetBranchAddress("P.gtr.beta",&pbeta);


    ss->SetBranchAddress("evNumber", &scaler_eventnum);
    ss->SetBranchAddress("P.BCM1.scalerCharge", &bcm1charge);
    ss->SetBranchAddress("P.BCM1.scalerCurrent", &bcm1current);
    ss->SetBranchAddress("P.1MHz.scalerTime", &scaler1MHztime);
    ss->SetBranchAddress("P.1MHz.scalerTimeCut",&scaler1MHztimecut);
    ss->SetBranchAddress("P.BCM1.scalerChargeCut",&bcm1chargecut);
    ss->SetBranchAddress("P.S1X.scaler", &s1xscaler);
    ss->SetBranchAddress("P.S1Y.scaler", &s1yscaler);
    ss->SetBranchAddress("P.S2X.scaler", &s2xscaler);
    ss->SetBranchAddress("P.pTRIG3.scaler", &ptrig3scaler);
    ss->SetBranchAddress("P.pTRIG4.scaler", &ptrig4scaler);
    ss->SetBranchAddress("P.pTRIG6.scaler", &ptrig6scaler);
    ss->SetBranchAddress("P.EDTM.scaler",&pedtmscaler);
    ss->SetBranchAddress("P.pEL_CLEAN.scaler", &pelcleanscaler);
    ss->SetBranchAddress("P.pL1ACCP.scaler",&pl1acceptscaler);
 
    ss->SetBranchAddress("P.EDTM.scalerCut",&pedtmscalercut);

    ss->SetBranchAddress("P.pTRIG4.scalerCut", &ptrig4scalercut);
    ss->SetBranchAddress("P.pTRIG5.scalerCut", &ptrig5scalercut);
    ss->SetBranchAddress("P.pTRIG6.scalerCut", &ptrig6scalercut);

    const int  nentriesD = tt->GetEntries();
    //cout<<"Data entries = "<<nentriesD<<"  "<<endl;
    const int  nscalerD = ss->GetEntries();
    //cout<<"Scaler entries = "<<nscalerD<<"  "<<endl;


    int ev_flag[nscalerD];//---------------------------f1
    int scal_evt_num[nscalerD];//---------------------f2
 
    for (int j = 0; j < nscalerD; j++){ 
      ss->GetEntry(j);
      hcurrent->Fill(bcm1current);
    }

    for (int i = 0; i < nscalerD; i++){ 
      ss->GetEntry(i);
      ev_flag[i] = 0;
      scal_evt_num[i] = scaler_eventnum;
      setCur = hcurrent->GetBinCenter(hcurrent->GetMaximumBin());

      if(abs(setCur - bcm1current) < th_current){
	ev_flag[i] = 1;


      }
    }

    TCanvas * c1 = new TCanvas ("c1", "c1", 600, 400);
    c1->Divide(2,2);
    c1->cd(1);
    hcurrent->Draw();
    //cout << "setCurrent = "<< setCur << endl;

    int scal = 0;
    
    for (int j = 0; j < nentriesD; j++){
      tt->GetEntry(j);
      if(ev_flag[scal]==1){

	if (eventtype > 3){  
	  hpbeta->Fill(pbeta);
	}
	
	if(edtmtdctimeraw>0){
	  hpedtmtdctimeraw->Fill(edtmtdctimeraw);
	  
	}
      }
      if(data_eventnum==scal_evt_num[scal]){ scal++;}
    }

    c1->cd(2);
    hpbeta->Draw();

    c1->cd(3);
    hpedtmtdctimeraw->Draw();

    double good_Ev = hpbeta->GetEntries();
    double nEDTM= hpedtmtdctimeraw->GetEntries();
    double numerator = good_Ev - nEDTM ;

    //cout << "1 = " << good_Ev <<" " <<"  & 2 = " << nEDTM << " "<< " & numerator = " << numerator << endl;


    //cout<< "3.1 = " << ptrig4scalercut << endl;
    //cout<< "3.2 = " << ptrig5scalercut << endl;
    //cout<< "3.3 = " << ptrig6scalercut <<endl;

    //cout<<"4 = "<< pedtmscalercut <<endl;

    double denominator = ptrig6scalercut -  pedtmscalercut;
    //cout << "denominator = "<< denominator <<endl;
    
    double LT = numerator / denominator;
    double LT_err = LT * sqrt(1/numerator);
    
    //cout <<  "LT = " << LT <<"\t"<< "LT_err = "<<LT_err<< endl;
    
    

    delete c1;

    //cout<< runs[r] <<"\t"<<rate[r]<<"\t"<<LT<<"\t"<<LT_err<<endl;
    
    //cout << "=========== Next Run=============  " <<endl;

    
    txtfile<< runs[r] <<"\t"<<rate[r]<<"\t"<<LT<<"\t"<<LT_err<<endl;


  }
 
}
