#include "header.h"

#define NRUNS 1//71
void comp(){
  //#include "gStyle.h"
  gStyle->SetOptStat(0);
  ofstream txtfile1("txtfile_csv/livetime_csv.txt",ios::app);
  ofstream txtfile2("txtfile_csv/hms_tr_csv.txt",ios::app);
  ofstream txtfile3("txtfile_csv/shms_tr_csv.txt",ios::app);
  ofstream txtfile4("txtfile_csv/yield_bare_csv.txt",ios::app);
  ofstream txtfile5("txtfile_csv/yield_lttr_csv.txt",ios::app);
  ofstream txtfile6("txtfile_csv/hcal_eff.txt",ios::app);
  ofstream txtfile7("txtfile_csv/pcal_eff.txt",ios::app);
  ofstream txtfile8("txtfile_csv/all.txt",ios::app);
  ofstream txtfile9("txtfile_csv/all_uneedis.txt",ios::app);
  ofstream txtfile10("txtfile_csv/ctpeak_rfoffset.txt",ios::app);


  //Int_t runs[NRUNS] = {7635, 7636, 7637, 7638, 7639, 7593, 7594, 7595, 7596, 7597, 7599, 7600, 7601, 7602, 7603, 7604, 7642, 7643, 7644, 7645, 7640, 7641, 7608, 7609, 7610, 7605, 7606, 7607, 7646, 7647, 7648, 7649, 7650, 7651, 7652, 7654, 7655, 7611, 7612, 7613, 7614, 7616, 7617, 7618, 7619, 7661, 7662, 7663, 7666, 7667, 7668, 7669, 7670, 7657, 7658, 7659, 7660, 7625, 7626, 7627, 7628, 7629, 7630, 7631, 7632, 7633, 7634, 7620, 7621, 7622, 7623};

  Int_t runs[NRUNS] = {7593};//, 7594, 7595, 7596};//, 7597, 7599, 7600, 7601, 7602, 7603, 7604, 7605, 7606, 7607, 7608, 7609, 7610, 7611, 7612, 7613, 7614, 7616, 7617, 7618, 7619, 7620, 7621, 7622, 7623, 7625, 7626, 7627, 7628, 7629, 7630, 7631, 7632, 7633, 7634, 7635, 7636, 7637, 7638, 7639, 7640, 7641, 7642, 7643, 7644, 7645, 7646, 7647, 7648, 7649, 7650, 7651, 7652, 7654, 7655, 7657, 7658, 7659, 7660, 7661, 7662, 7663, 7666, 7667, 7668, 7669, 7670}; 
  
  // gROOT->SetBatch("kTRUE");
  for(Int_t r=0; r<NRUNS; r++){

    TString filename  = Form("/home/hdbhatt/Desktop/data_simc/data_simc_kin33_34/datasimc_sept/ROOTfiles/coin_replay_production_%d_-1.root", runs[r]);

    TFile *f = new TFile(filename, "READ");

    cout<< "Opening Run Num = "<< runs[r] <<endl; 
    
    if(f->IsZombie()){
      std::cout << "Error opening file "<< std::endl;
      continue;
    }

#include "binz.h"
    Double_t pionmass   = 0.1395701835;    //Gev/c^2 
    Double_t protonmass = 0.93827231;//GeV/c2
    Double_t dxbj, dQ2, dnu,  dW2, dpmiss, demiss,  zhad, Mx2 ;//d = data
    Double_t pbeta,hbeta,pdelta,hdelta,hcaletottrack,pcaletottrack,pcalepr,hcalepr,paero,hcernpe,hgcer,W,Q2,xbj,ctime,Epi,Epi_d,Epi_acc,z,z_d,z_acc,pkinomega,PgtrP,HgtrP,hhodstarttime,phodstarttime,hdipole, pdipole,pcaletotnorm,phodgoodscinhit,betanotrack,pdcntrack,pdcch1nhit,pdcch2nhit, phodrftdcmult,phodrftdctime,prftdcmult,prftdctime , hhodrftdcmult,hhodrftdctime,hrftdcmult,hrftdctime,phodfphitstime,hhodfphitstime,rfminusfp,eventtype,rf_pion,hhodgoodscinhit,hhodbetanotrack,hdcntrack,hgtry,pgtry,phodbetanotrack,hcaletotnorm,gevnum ;

    double scaler_eventnum,bcm1charge,bcm1current,scaler1MHztime,scaler1MHztimecut,bcm1chargecut,s1xscaler,s1yscaler,s2xscaler,s2yscaler,ptrig1scaler,ptrig2scaler,ptrig3scaler,ptrig4scaler,ptrig6scaler,pedtmscaler,pelcleanscaler,pl1acceptscaler,edtmtdctime,edtmtdctimeraw,mult,ptrig1rate,rate,charge   ;
    
    Double_t Epi_dcut0, z_dcut0, Epi_dcut1, z_dcut1, Epi_dcut2, z_dcut2, Epi_dcut3, z_dcut3, Epi_dcut1plus2, z_dcut1plus2; 
    Double_t Epi_acc0, z_acc0, Epi_acc1, z_acc1, Epi_acc2, z_acc2, Epi_acc3, z_acc3, Epi_acc1plus2, z_acc1plus2;

    Bool_t  accR_cut, accL_cut,shms_cut,pid_cut,tracking_cut,did_cut,should_cut,acc_cut_should,acc_cut_did,pid_cut_acc,hgcer_cut, paero_cut, mod4_pioncut, mod4_notpioncut, pcal_cut, ctime_cut, hms_cut, pcal_cut_tight, cuttype1, cuttype1acc, cuttype2, cuttype2acc, cuttype1plus2, cuttype1plus2acc , hgcer_cut_loose,  paero_cut_loose,  cuttype0, cuttype0acc, common_cut, cuttype3, cuttype3acc, accsub_cut, acc_cut, shms_tr_did_cut, shms_tr_should_cut, hms_tr_did_cut, hms_tr_should_cut,basic_cut,basic_cal_aero, hms_cal_should_cut, hms_cal_did_cut, shms_cal_should_cut, shms_cal_did_cut, cal_eff_hms_shms_base_cut  ;

    Double_t ctmin = 1.6;
    Double_t ctmax = 1.6;
    Double_t rfmin = 0.6;
    Double_t rfmax = 1.4;
    Double_t eprmin = 0.0;
    Double_t eprmax = 0.15;
    Double_t pcaletotmin = 0.0;
    Double_t pcaletotmax = 0.75;
    // Double_t offsetrf = 399.05;//this is for runs 6429...6459...
    //  Double_t offsetrf = 400.10;//For Run 7699 and all 7671 to 7699 
    // Double_t offsetrf = 398.05;//this is for runs 7702-7722

    Double_t offsetrf;
     
    // if(runs[r] > 7699) offsetrf  = 398.05;//this was true for kin 35-36
    // else offsetrf = 400.10;//default for kin 35 36
      
    if(runs[r]>=7593 && runs[r]<= 7623){offsetrf= 400.0;}
    
    TTree * tt = (TTree *)f->Get("T");
    TTree * ss = (TTree *)f->Get("TSP");

   
    TH1F *hcal_tr_did        = new TH1F("hcal_tr_did","",100, 0, 2);
    TH1F *hcal_tr_should     = new TH1F("hcal_tr_should","",100, 0, 2);
    TH1F *pcal_tr_did        = new TH1F("pcal_tr_did","",100, 0, 2);
    TH1F *pcal_tr_should     = new TH1F("pcal_tr_should","",100, 0, 2);
    TH1F *hedtm_trig_acc_all = new TH1F("htrigaccall","",500, 120, 250);
    TH1F *hptrig1rate        = new TH1F("hptrig1rate","",100, 10000 , 600000);
    //---------------Main 1D pid plots------------
    TH1F *hpbeta         = new TH1F("hpbeta","",100, -0.5, 1.5);
    TH1F *hpbetact       = new TH1F("hpbetact","",100, -0.5, 2);
    TH1D *hctime         = new TH1D("hctime", "ctime (ns)", binaccct, loaccct, hiaccct);
    TH1D *hctimect       = new TH1D("hctimect", "ctime (ns)", binaccct, loaccct, hiaccct);
    TH1D *hctimeacc      = new TH1D("hctimeacc", "ctime (ns)", binaccct, loaccct, hiaccct);
    TH1D *hRF            = new TH1D("hRF", "RF = (fmod(-prftdctime+phodfphitstime + offsetrf ,4.008)) ", binrf, binrflo, binrfhi);//(fmod(-prftdctime+phodfphitstime+ offsetrf ,4.008))
    TH1D *hRF_pid        = new TH1D("hRF_pid", "RF_pid = (fmod(-prftdctime+phodfphitstime + offsetrf ,4.008)) ", binrf, binrflo, binrfhi);//(fmod(-prftdctime+phodfphitstime+ offsetrf ,4.008))
    //---------------Basic 2D plots=> hms and shms but not PID------------

    TH2D *ctime_vs_rfb    = new TH2D("ctime_vs_rfb", "CTIME vs RF NOPID", binrf, binrflo, binrfhi, binct, loct, hict);
    TH2D *shwr_vs_rfb     = new TH2D("shwr_vs_rfb", "SHOWER vs RF NOPID", binrf, binrflo, binrfhi, binshwr, loshwr, hishwr);
    TH2D *epr_vs_rfb      = new TH2D("epr_vs_rfb"," EPR vs RF  NOPID ", binrf, binrflo, binrfhi, bincalepr, localepr, hicalepr);
    TH2D *etot_vs_rfb     = new TH2D("etot_vs_rfb"," ETOTTRACKNORM vs RF NOPID ", binrf, binrflo, binrfhi, bincal, local, hical);
    TH2D *aero_vs_rfb     = new TH2D("aero_vs_rfb","AERO_vs_RF NOPID",binrf, binrflo, binrfhi, binaero, binloaero, binhiaero);
    TH2D *beta_vs_rfb     = new TH2D("beta_vs_rfb","BETA vs RF NOPID",binrf, binrflo, binrfhi, 100, -0.5, 1.5 );
    TH2D *aero_vs_ctb     = new TH2D("hctime_vs_rfb", "AERO vs RF NOPID",binaero, binloaero, binhiaero, binct, loct, hict );
    TH2D *sh_vs_pshb      = new TH2D("sh_vs_pshb","SH_vs_PRESH NOPID",100, 0.0,0.8, 100, 0.0, 1.8);

    //------------ CAL CT AERO
    TH2D *ctime_vs_rf_calaero      = new TH2D("ctime_vs_rf_calaero", "CTIME vs RF NOPID", binrf, binrflo, binrfhi, binct, loct, hict);//no ct cut
    TH2D *shwr_vs_rf_calctaero     = new TH2D("shwr_vs_rf_calctaero", "SHOWER vs RF NOPID", binrf, binrflo, binrfhi, binshwr, loshwr, hishwr);
    TH2D *epr_vs_rf_calctaero      = new TH2D("epr_vs_rf_calctaero"," EPR vs RF  NOPID ", binrf, binrflo, binrfhi, bincalepr, localepr, hicalepr);
    TH2D *etot_vs_rf_calctaero     = new TH2D("etot_vs_rf_calctaero"," ETOTTRACKNORM vs RF NOPID ", binrf, binrflo, binrfhi, bincal, local, hical);
    TH2D *aero_vs_rf_calctaero     = new TH2D("aero_vs_rf_calctaero","AERO_vs_RF NOPID",binrf, binrflo, binrfhi, binaero, binloaero, binhiaero);
    TH2D *beta_vs_rf_calctaero     = new TH2D("beta_vs_rf_calctaero","BETA vs RF NOPID",binrf, binrflo, binrfhi, 100, -0.5, 1.5 );
    TH2D *aero_vs_ct_calctaero     = new TH2D("hctime_vs_rf_calctaero", "AERO vs RF NOPID",binaero, binloaero, binhiaero, binct, loct, hict );
    TH2D *sh_vs_psh_calctaero      = new TH2D("sh_vs_psh_calctaero","SH_vs_PRESH NOPID",100, 0.0,0.8, 100, 0.0, 1.8);
    
    
    //---------------Main 2D plots=> hms, shms, rf and PID
    TH2D *ctime_vs_rf    = new TH2D("ctime_vs_rf", "CTIME vs RF", binrf, binrflo, binrfhi, binct, loct, hict);
    TH2D *shwr_vs_rf     = new TH2D("shwr_vs_rf", "SHOWER vs RF", binrf, binrflo, binrfhi, binshwr, loshwr, hishwr);
    TH2D *epr_vs_rf      = new TH2D("epr_vs_rf"," EPR vs RF ", binrf, binrflo, binrfhi, bincalepr, localepr, hicalepr);
    TH2D *etot_vs_rf     = new TH2D("etot_vs_rf"," ETOTTRACKNORM vs RF ", binrf, binrflo, binrfhi, bincal, local, hical);
    TH2D *aero_vs_rf     = new TH2D("aero_vs_rf","AERO_vs_RF",binrf, binrflo, binrfhi, binaero, binloaero, binhiaero);
    TH2D *beta_vs_rf     = new TH2D("beta_vs_rf","BETA vs RF",binrf, binrflo, binrfhi, 100, -0.5, 1.5 );
    TH2D *aero_vs_ct     = new TH2D("hctime_vs_rf", "AERO vs RF",binaero, binloaero, binhiaero, binct, loct, hict );
    TH2D *sh_vs_psh      = new TH2D("sh_vs_psh","SH_vs_PRESH",100, 0.0,0.8, 100, 0.0, 1.8);

    //cal effi
    TH1D *hcal_did       = new TH1D("hcal_did", "hcal_did", 100, 0, 2);
    TH1D *hcal_should    = new TH1D("hcal_should", "hcal_should", 100, 0, 2);
    TH1D *pcal_did       = new TH1D("pcal_did", "pcal_did", 100, 0, 2);
    TH1D *pcal_should    = new TH1D("pcal_should", "pcal_should", 100, 0, 2);
    //data simc comp a  acc, d = data

    Int_t binda = 50;
    TH1D *d_xbj = new TH1D("d_xbj","d_xbj", binda, 0, 1);
    TH1D *d_xbja = new TH1D("d_xbja","d_xbja", binda, 0, 1);
    TH1D *d_xbj1 = new TH1D("d_xbj1","d_xbj1", binda, 0, 1);//1 = acc subtracted

    TH1D *d_zhad = new TH1D("d_zhad","d_zhad", binda, 0, 1);
    TH1D *d_zhada = new TH1D("d_zhada","d_zhada", binda, 0, 1);
    TH1D *d_zhad1 = new TH1D("d_zhad1","d_zhad1", binda, 0, 1);

    TH1D *d_Q2 = new TH1D("d_xb","d_Q2", binda, 0, 10);
    TH1D *d_Q2a = new TH1D("d_Q2a","d_Q2a", binda, 0, 10);
    TH1D *d_Q21 = new TH1D("d_xb1","d_Q21", binda, 0, 10);

    TH1D *d_nu = new TH1D("d_nu","d_nu", binda, 0, 10);
    TH1D *d_nua = new TH1D("d_nua","d_nua", binda, 0, 10);
    TH1D *d_nu1 = new TH1D("d_nu1","d_nu1", binda, 0, 10);

    TH1D *d_W2 = new TH1D("d_W2","d_W2", binda, 0, 10);
    TH1D *d_W2a = new TH1D("d_W2a","d_W2a", binda, 0, 10);
    TH1D *d_W21 = new TH1D("d_W21","d_W21", binda, 0, 10);

    TH1D *d_Wprime2 = new TH1D("d_Wprime2","d_Wprime2", binda, 0, 10);
    TH1D *d_Wprime2a = new TH1D("d_Wprime2a","d_Wprime2a", binda, 0, 10);
    TH1D *d_Wprime21 = new TH1D("d_Wprime21","d_Wprime21", binda, 0, 10);

    TH1D *d_pmiss = new TH1D("d_pmiss","d_pmiss", binda, 0, 10);
    TH1D *d_pmissa = new TH1D("d_pmissa","d_pmissa", binda, 0, 10);
    TH1D *d_pmiss1 = new TH1D("d_pmiss1","d_pmiss1", binda, 0, 10);

    TH1D *d_emiss = new TH1D("d_emiss","d_pmiss", binda, 0, 10);
    TH1D *d_emissa = new TH1D("d_emissa","d_emissa", binda, 0, 10);
    TH1D *d_emiss1 = new TH1D("d_emiss1","d_pmiss1", binda, 0, 10);

    

    //----------------------------------------Fill Hist
#include "branch.h"
    //#include "scalerbranch.h"

    Long64_t nentriesD = tt->GetEntries();
    //livetime
    Long64_t nscalerD = ss->GetEntries();
    // for (int j = 0; j < nscalerD; j++){
    //   ss->GetEntry(j);
    //   current_bcmcut = bcm1chargecut/scaler1MHztimecut;
    //   current_nobcmcut = bcm1charge/scaler1MHztime;
    //   hptrig1rate->Fill(ptrig1rate);
    // }
    
    // charge= bcm1chargecut*0.001;
    // double bin_max_rate = hptrig1rate->GetMaximumBin();
    // rate = hptrig1rate->GetBinCenter(bin_max_rate);
    // PTRIG1_Rate = rate*0.001;
    Double_t  Scal_evNumber;
    ss->SetBranchAddress("evNumber",&Scal_evNumber);
    Double_t  Scal_BCM4B_charge;
    ss->SetBranchAddress("P.BCM4B.scalerCharge",&Scal_BCM4B_charge);
    Double_t  Scal_BCM4B_current;
    ss->SetBranchAddress("P.BCM4B.scalerCurrent",&Scal_BCM4B_current);
    Double_t  Scal_BCM1_charge;
    ss->SetBranchAddress("P.BCM1.scalerCharge",&Scal_BCM1_charge);
    Double_t  Scal_BCM1_current;
    ss->SetBranchAddress("P.BCM1.scalerCurrent",&Scal_BCM1_current);
    Double_t  Scal_time;
    ss->SetBranchAddress("P.1MHz.scalerTime",&Scal_time);
    Double_t  Scal_EDTM;
    ss->SetBranchAddress("P.EDTM.scaler",&Scal_EDTM);
    Double_t  Scal_hEL_CLEAN;
    ss->SetBranchAddress("P.pEL_CLEAN.scaler",&Scal_hEL_CLEAN);
    Double_t  Scal_hEL_REAL;
    ss->SetBranchAddress("P.pEL_REAL.scaler",&Scal_hEL_REAL);
    Double_t  Scal_TRIG2;
    ss->SetBranchAddress("P.pTRIG2.scaler",&Scal_TRIG2);
    Double_t  Scal_TRIG3;
    ss->SetBranchAddress("P.pTRIG3.scaler",&Scal_TRIG3);
    Double_t  Scal_TRIG1;
    ss->SetBranchAddress("P.pTRIG1.scaler",&Scal_TRIG1);
    Double_t  Scal_TRIG4;
    ss->SetBranchAddress("P.pTRIG4.scaler",&Scal_TRIG4);
    Double_t  Scal_TRIG5;
    ss->SetBranchAddress("P.pTRIG5.scaler",&Scal_TRIG5);
    Double_t  Scal_TRIG6;
    ss->SetBranchAddress("P.pTRIG6.scaler",&Scal_TRIG6);
    Double_t  Scal_pHGCER;
    ss->SetBranchAddress("P.HCER.scaler",&Scal_pHGCER);
    Double_t  Scal_Splane[4];
    ss->SetBranchAddress("P.S1X.scaler",&Scal_Splane[0]);
    ss->SetBranchAddress("P.S1Y.scaler",&Scal_Splane[1]);
    ss->SetBranchAddress("P.S2X.scaler",&Scal_Splane[2]);
    ss->SetBranchAddress("P.S2Y.scaler",&Scal_Splane[3]);

    //loop through scalers
    Int_t nscal_reads=0;
    Int_t nscal_reads_cut=0;
    Double_t prev_read=-1;
    Double_t charge_sum=0;
    Double_t charge_sum_cut=0;
    Double_t prev_charge=0;
    Double_t charge_sum_corr=0;
    Double_t charge_sum_cut_corr=0;
    Double_t prev_charge_corr=0;
    Double_t event_flag[20000];
    Double_t scal_event_number[20000];
    Double_t tot_scal_EDTM=0;
    Double_t tot_scal_cut_EDTM=0;
    Double_t prev_EDTM=0;
    Double_t tot_scal_hEL_CLEAN=0;
    Double_t tot_scal_cut_hEL_CLEAN=0;
    Double_t prev_hEL_CLEAN=0;
    Double_t tot_scal_hEL_REAL=0;
    Double_t tot_scal_cut_hEL_REAL=0;
    Double_t prev_hEL_REAL=0;
    Double_t tot_scal_TRIG2=0;
    Double_t tot_scal_TRIG3=0;
    Double_t prev_TRIG2=0;
    Double_t prev_TRIG3=0;
    Double_t tot_scal_cut_TRIG2=0;
    Double_t tot_scal_cut_TRIG3=0;
    Double_t tot_scal_TRIG1=0;
    Double_t tot_scal_TRIG4=0;
    Double_t prev_TRIG1=0;
    Double_t prev_TRIG4=0;
    Double_t tot_scal_cut_TRIG1=0;
    Double_t tot_scal_cut_TRIG4=0;
    Double_t tot_scal_cut_time=0;
    Double_t tot_scal_TRIG5=0;
    Double_t prev_TRIG5=0;
    Double_t tot_scal_cut_TRIG5=0;
    Double_t tot_scal_TRIG6=0;
    Double_t prev_TRIG6=0;
    Double_t tot_scal_pHGCER=0;
    Double_t tot_scal_cut_pHGCER=0;
    Double_t prev_pHGCER=0;
    Double_t tot_scal_cut_TRIG6=0;
    Double_t threshold_cut=3.;
    //
    Double_t tot_scal_Splane[4]={0,0,0,0};
    Double_t prev_Splane[4]={0,0,0,0};
    Double_t tot_scal_cut_Splane[4]={0,0,0,0};
    //
    Double_t tot_scal_time=0;
    Double_t prev_time=0;
    //
    Long64_t scal_entries = ss->GetEntries();
    // cout << " scal ent = " << scal_entries << endl;
    Double_t nlast=float(scal_entries);
    TH1F *h_cur_entry = new TH1F("h_cur_entry","; ENtry;current",nlast,0,nlast);
    TH1F *h_cur = new TH1F("h_cur","; Current ;",200,0,100);
    //  Long64_t data_entries = tt->GetEntries();
    for (int i = 0; i < scal_entries; i++) {
      ss->GetEntry(i);
      h_cur_entry->Fill(float(i),Scal_BCM1_current);
      if (Scal_BCM1_current > 3) h_cur->Fill(Scal_BCM1_current);
    }
    
    
    
    Double_t peak_current = h_cur->GetBinCenter(h_cur->GetMaximumBin());
    //cout << " Peak current = " << peak_current  <<" " <<  h_cur->GetMaximumBin() << endl;
    Double_t Scal_BCM1_charge_corr=0;
    for (int i = 0; i < scal_entries; i++) {
      ss->GetEntry(i);
      event_flag[nscal_reads] = 0;
      scal_event_number[nscal_reads] = Scal_evNumber;
      Double_t BCM1_correction=1.;
      if (Scal_BCM1_current >2.) {
	if (Scal_BCM1_current <= 60) {
	  BCM1_correction =1.0 + 0.045* ( log(60.)-log(Scal_BCM1_current))/( log(60.)-log(2.) );
	} else {
	  BCM1_correction =1.0 + 0.010*(Scal_BCM1_current-60)/25.;
	} 
      }
      Scal_BCM1_charge_corr+=Scal_BCM1_current*(Scal_time-prev_time)*BCM1_correction;
      //cout << Scal_BCM1_charge << " "  << Scal_BCM1_charge_corr << " " << BCM1_correction << endl;
      if (TMath::Abs(Scal_BCM1_current-peak_current) < threshold_cut) {
	event_flag[nscal_reads] = 1;


	tot_scal_cut_time+=(Scal_time-prev_time);
	tot_scal_cut_EDTM+=(Scal_EDTM-prev_EDTM);
	tot_scal_cut_hEL_CLEAN+=(Scal_hEL_CLEAN-prev_hEL_CLEAN);
	tot_scal_cut_hEL_REAL+=(Scal_hEL_REAL-prev_hEL_REAL);
	tot_scal_cut_TRIG2+=(Scal_TRIG2-prev_TRIG2);
	tot_scal_cut_TRIG3+=(Scal_TRIG3-prev_TRIG3);
	tot_scal_cut_TRIG1+=(Scal_TRIG1-prev_TRIG1);
	tot_scal_cut_TRIG4+=(Scal_TRIG4-prev_TRIG4);
	tot_scal_cut_TRIG5+=(Scal_TRIG5-prev_TRIG5);
	tot_scal_cut_TRIG6+=(Scal_TRIG6-prev_TRIG6);
	tot_scal_cut_pHGCER+=(Scal_pHGCER-prev_pHGCER);
	for (Int_t s=0;s<4;s++) tot_scal_cut_Splane[s]+=(Scal_Splane[s]-prev_Splane[s]);
	//	     cout << i << " " << tot_scal_cut_Splane[0] << " " << Scal_Splane[0] << " " << prev_Splane[0] << endl;

	charge_sum_cut+=(Scal_BCM1_charge-prev_charge);
	charge_sum_cut_corr+=(Scal_BCM1_charge_corr-prev_charge_corr);
	nscal_reads_cut++;
      }
      prev_charge = Scal_BCM1_charge;
      prev_charge_corr = Scal_BCM1_charge_corr;
      prev_time = Scal_time;
      prev_EDTM = Scal_EDTM;
      prev_hEL_CLEAN = Scal_hEL_CLEAN;
      prev_hEL_REAL = Scal_hEL_REAL;
      prev_TRIG2 = Scal_TRIG2;
      prev_TRIG3 = Scal_TRIG3;
      prev_TRIG1 = Scal_TRIG1;
      prev_TRIG4 = Scal_TRIG4;
      prev_TRIG5 = Scal_TRIG5;
      prev_TRIG6 = Scal_TRIG6;
      prev_pHGCER = Scal_pHGCER;
      for (Int_t s=0;s<4;s++) prev_Splane[s]=Scal_Splane[s];
      // cout <<  nscal_reads <<  " " << Scal_BCM4B_current << " " << event_flag[nscal_reads] << " " << Scal_TRIG1 << endl;
      nscal_reads++;
      charge_sum=Scal_BCM1_charge;
      charge_sum_corr=Scal_BCM1_charge_corr;
      tot_scal_EDTM=Scal_EDTM;
      tot_scal_hEL_CLEAN=Scal_hEL_CLEAN;
      tot_scal_hEL_REAL=Scal_hEL_REAL;
      tot_scal_TRIG2=Scal_TRIG2;
      tot_scal_TRIG3=Scal_TRIG3;
      tot_scal_TRIG1=Scal_TRIG1;
      tot_scal_TRIG4=Scal_TRIG4;
      tot_scal_TRIG5=Scal_TRIG5;
      tot_scal_TRIG6=Scal_TRIG6;
      tot_scal_time=Scal_time;
      tot_scal_pHGCER=Scal_pHGCER;
      for (Int_t s=0;s<4;s++) tot_scal_Splane[s]=Scal_Splane[s];
    }

    
    Double_t Elclean_Rate = tot_scal_cut_hEL_CLEAN/(tot_scal_cut_time*1000);
    Double_t Elreal_Rate = tot_scal_cut_hEL_REAL/(tot_scal_cut_time*1000);
    Double_t PTRIG2_Rate = tot_scal_cut_TRIG2/(tot_scal_cut_time*1000);
    Double_t PTRIG3_Rate = tot_scal_cut_TRIG3/(tot_scal_cut_time*1000);//----------------------------------------------------HMS
    Double_t hgcer_trig_rate =  tot_scal_cut_pHGCER/(tot_scal_cut_time*1000);//kHz
    Double_t PTRIG1_Rate = tot_scal_cut_TRIG1/(tot_scal_cut_time*1000);
    Double_t Edtm_Rate = tot_scal_cut_EDTM/(tot_scal_cut_time*1000);

    Int_t nscaler_reads_acc=0;
    for (int kk=0; kk<nentriesD;  kk++){//---------------------------------------For Cointime and Acc subtraction only
      tt->GetEntry(kk);

      //  if (event_flag[nscaler_reads_acc]==1) {
	paero_cut = paero>3.0;
	hgcer_cut = hgcer>1.0;
	rf_pion = (fmod(-prftdctime+phodfphitstime+ offsetrf ,4.008));
	mod4_pioncut = rf_pion > rfmin && rf_pion < rfmax;
	mod4_notpioncut =!mod4_pioncut;
	pcal_cut =  pcaletottrack < pcaletotmax  && pcalepr< eprmax ;	    
	hms_cut  =  hdelta> -8 && hdelta < 8  && hhodstarttime ==1 && hdipole==1  && hcaletottrack > 0.8 ;
	shms_cut =  pdelta >-10 && pdelta < 20   && phodstarttime == 1  && eventtype > 3 &&  pcal_cut && mod4_pioncut && paero_cut && pdipole ==1;
	pid_cut  = hms_cut && shms_cut;
       
      
	if (pid_cut){
	  hpbeta->Fill(pbeta);
	  hctime->Fill(ctime);
	  
	 
	}
	//}
    // if (gevnum == scal_event_number[nscaler_reads_acc])  nscaler_reads_acc++;
    }
    //cout<<"Step 1: calulating the max peak value of the ctime dist"<<endl;

    Double_t counts_betaa=hpbeta->GetEntries();
    Double_t counts_W2a=d_W2a->GetEntries();

    cout<< "countscomp = " <<counts_betaa <<"    "<<  counts_W2a<<endl;
    
    Int_t bin_max = hctime->GetMaximumBin();
    Double_t max_value = hctime->GetBinCenter(bin_max);
    cout<<"ctime peak is at = "<< max_value <<endl;
    cout<<"Opening Run = "<<runs[r]<<"    "<<"ctime peak at = "<< max_value<<"   "<< "offsetrf =   "<<offsetrf<<"     "<<"Total Entries = "<<tt->GetEntries()<<endl;
    cout<< "  "<<endl;


    
    cout<<"Step 2: Now calculating accidental backgrounds"<<endl;
    Bool_t hgcer_cut1 ,paero_cut1 , mod4_pioncut1,  mod4_notpioncut1,   pcal_cut1,   hms_cut1,   shms_cut1, shms_cut2, pid_cut1, ctime_cut1, acc_cut1;

    Int_t nscaler_reads=0;

    
    for (int kk=0; kk<nentriesD;  kk++){//-----------------------------------------------------Main Evt Loop
      // for (int kk=0; kk<100;  kk++){//-----------------------------------------------------Main Evt Loop
      tt->GetEntry(kk);
      if (event_flag[nscaler_reads]==1) {


	accL_cut        =   ctime > (max_value - 18 ) && ctime < (max_value - 10);
	accR_cut        =   ctime > (max_value + 14 ) && ctime < (max_value + 22);
	acc_cut1 = (accR_cut || accL_cut);
	ctime_cut1 = ctime > max_value - ctmin && ctime < max_value + ctmax;


	paero_cut1 = paero>3.0;
	hgcer_cut =  hgcer>2.0;
	rf_pion = (fmod(-prftdctime+phodfphitstime+ offsetrf ,4.008));
	mod4_pioncut1 = rf_pion > rfmin && rf_pion < rfmax;
	mod4_notpioncut1 =!mod4_pioncut;
	pcal_cut1 =  pcaletottrack < pcaletotmax  && pcalepr< eprmax ;	    
	hms_cut1  =  hdelta> -8 && hdelta < 8 && hhodstarttime ==1 && hdipole==1  && hcaletottrack > 0.8;
	shms_cut1 =  pdelta >-10 && pdelta < 20   && phodstarttime == 1 && pdipole ==1 && eventtype > 3;//basic
	shms_cut2 =  pcal_cut1 && mod4_pioncut1 && paero_cut1;//main pi+/- pid
	basic_cut = hms_cut1 && shms_cut1;
	basic_cal_aero = hms_cut1 && shms_cut1 &&  pcal_cut1 && paero_cut1;//No RF
	pid_cut1 = hms_cut1 && shms_cut1 && shms_cut2 && ctime_cut1;//-------------------all cut vs1
	acc_cut1 = hms_cut1 && shms_cut1 && shms_cut2 && acc_cut1;//final accidental cut----------------------------------------->

	//////efficiencies==============================

       
	shms_tr_should_cut  = (phodgoodscinhit==1  && pcaletotnorm < 0.75  && phodstarttime==1 && eventtype > 3   &&  paero_cut1 )  ;  
	shms_tr_did_cut     = ( shms_tr_should_cut &&  pdcntrack >0 ) ;  

	 
	hms_tr_should_cut   = (hhodgoodscinhit==1  && hcaletotnorm > 0.8  && hhodstarttime==1   && eventtype > 3 && hcernpe > 1.5);
	hms_tr_did_cut      = ( hms_tr_should_cut && hdcntrack >0) ;  



	//cal eff
	//  cal_eff_hms_shms_base_cut = hdelta> -10 && hdelta < 10 &&  hbeta> 0.8 &&  hbeta <1.2  && hhodstarttime ==1 && hdipole==1 && hcernpe>1.5 && pdelta > -10 && pdelta < 20   && pbeta <1.5 && phodstarttime == 1 && pdipole ==1 && eventtype > 3 && ctime_cut1 && paero_cut1 &&  mod4_pioncut1 && hgcer >1;//all basic cuts

	//play below
	cal_eff_hms_shms_base_cut = hdelta> -8 && hdelta < 8&&    hhodstarttime ==1 && hdipole==1 &&  eventtype > 3 && pdelta > -10 && pdelta < 20 && phodstarttime == 1 && pdipole ==1 &&   ctime_cut1 && paero_cut1 &&   mod4_pioncut1 ;//&& hgcer >1;

      
																				       
	hms_cal_should_cut       =   cal_eff_hms_shms_base_cut &&  pcaletottrack < 0.75 && pcalepr< 0.15 ;//base + shms cuts 
	hms_cal_did_cut          =   hms_cal_should_cut && hcaletottrack > 0.8;//should + hcal cuts


	shms_cal_should_cut     =   cal_eff_hms_shms_base_cut  && hcaletottrack > 0.8 ;//base + hms cuts
	shms_cal_did_cut        =   shms_cal_should_cut &&  pcaletottrack < 0.75 && pcalepr< 0.15;// should + pcal_cuts

      

      
	//livetime only========================================================
	if (edtmtdctimeraw > 0){
	  hedtm_trig_acc_all->Fill(edtmtdctimeraw);	
	}
      
	//tracking only
	if(hms_tr_did_cut){
	  hcal_tr_did->Fill(hcaletotnorm);
	}
	if(hms_tr_should_cut){
	  hcal_tr_should->Fill(hcaletotnorm);
	}

	if(shms_tr_did_cut){
	  pcal_tr_did->Fill(pcaletotnorm);
	}
	if(shms_tr_should_cut){
	  pcal_tr_should->Fill(pcaletotnorm);
	}
	//accidental only
	if(acc_cut1){
	  hctimeacc->Fill(ctime);
	  d_xbja->Fill(dxbj);
	  Epi = sqrt(pow(pionmass,2) + pow(PgtrP,2));//variable same
	  zhad = Epi/dnu;//variable name is same between acc abd real, but histogram name is different
	  d_zhada->Fill(zhad);
	  d_Q2a->Fill(dQ2);
	  d_nua->Fill(dnu);
	  d_W2a->Fill(dW2);
	  Mx2=(protonmass + dnu - zhad*dnu) *  (protonmass + dnu - zhad*dnu) - abs(dpmiss)*abs(dpmiss);
	  d_Wprime2a->Fill(Mx2);


	  
	}
	//basic cut = hms all + pbeta delta
	if(basic_cut){
	  ctime_vs_rfb->Fill(rf_pion, ctime);
	  shwr_vs_rfb->Fill(rf_pion, pcaletottrack - pcalepr);//b = basic
	  epr_vs_rfb->Fill(rf_pion, pcalepr);
	  etot_vs_rfb->Fill(rf_pion,pcaletottrack);
	  aero_vs_rfb->Fill(rf_pion, paero); 
	  beta_vs_rfb->Fill(rf_pion, pbeta);
	  aero_vs_ctb->Fill(ctime, paero);
	  hRF->Fill(rf_pion);
	}
	if(basic_cal_aero){
	  ctime_vs_rf_calaero->Fill(rf_pion, ctime);//
	}
	if(basic_cal_aero && ctime_cut1){
	  shwr_vs_rf_calctaero->Fill(rf_pion, pcaletottrack - pcalepr);
	  epr_vs_rf_calctaero->Fill(rf_pion, pcalepr);
	  etot_vs_rf_calctaero->Fill(rf_pion,pcaletottrack);
	  aero_vs_rf_calctaero->Fill(rf_pion, paero); 
	  beta_vs_rf_calctaero->Fill(rf_pion, pbeta);
	  aero_vs_ct_calctaero->Fill(ctime, paero);
	  //	if(hgcer_cut){
	  hRF_pid->Fill(rf_pion);//}
	}

      
	//good pid only
	if (pid_cut1){//--------------------------------------all pi+/- pid plots goes here
	  hpbetact->Fill(pbeta);
	  hctimect->Fill(ctime);
	
	  ctime_vs_rf->Fill(rf_pion, ctime);
	  shwr_vs_rf->Fill(rf_pion, pcaletottrack - pcalepr);
	  epr_vs_rf->Fill(rf_pion, pcalepr);
	  etot_vs_rf->Fill(rf_pion,pcaletottrack);
	  aero_vs_rf->Fill(rf_pion, paero); 
	  beta_vs_rf->Fill(rf_pion, pbeta);
	  aero_vs_ct->Fill(ctime, paero);

	  d_xbj->Fill(dxbj);
	  Epi = sqrt(pow(pionmass,2) + pow(PgtrP,2));//variable same
	  zhad = Epi/dnu;//variable so name is same between acc abd real
	  d_zhad->Fill(zhad);
	  d_Q2->Fill(dQ2);
	  d_nu->Fill(dnu);
	  d_W2->Fill(dW2);
	  Mx2=(protonmass + dnu - zhad*dnu) *  (protonmass + dnu - zhad*dnu) - abs(dpmiss)*abs(dpmiss);
	  d_Wprime2->Fill(Mx2);

       
	
	}

	if(hms_cal_did_cut){
	  hcal_did->Fill(hcaletottrack);
	}
	if(hms_cal_should_cut){
	  hcal_should->Fill(hcaletottrack);
	}	
     
	if(shms_cal_did_cut){
	  pcal_did->Fill(pcaletottrack);
	}
	if(shms_cal_should_cut){
	  pcal_should->Fill(pcaletottrack);
	}	 
      }//entries
      if (gevnum == scal_event_number[nscaler_reads])  nscaler_reads++;

    }

    //accdental sub copied 
    TH1D *  d_xbjac = (TH1D*)d_xbja->Clone();
    TH1D *  d_zhadac = (TH1D*)d_zhada->Clone();
    TH1D *  d_Q2ac = (TH1D*)d_Q2a->Clone();
    TH1D *  d_nuac = (TH1D*)d_nua->Clone();
    TH1D *  d_W2ac = (TH1D*)d_W2a->Clone();
    TH1D *  d_Wprime2ac = (TH1D*)d_Wprime2a->Clone();

    
    

    TCanvas * ac = new TCanvas ("ac", "ac", 1000, 800);
    ac->Divide(3,2);
    ac->cd(1);
    if (d_xbj->GetSumw2N() == 0) d_xbj->Sumw2(kTRUE);
    if (d_xbja->GetSumw2N() == 0) d_xbja->Sumw2(kTRUE);
    if (d_xbjac->GetSumw2N() == 0) d_xbjac->Sumw2(kTRUE);

    d_xbj->Draw("e, p1");
    d_xbj->SetMarkerStyle(8);
    d_xbj->SetMarkerColor(kBlue);
    d_xbjac->Scale(0.25);
    d_xbjac->Draw("e, p1 sames");
    d_xbjac->SetMarkerStyle(8);
     Double_t data_ent = d_xbj->GetEntries();
     Double_t acc_ent4 = d_xbja->GetEntries();
     Double_t acc_ent = d_xbjac->GetEntries();

    cout<<"events ="<< runs[r]<< "   "<<data_ent<<"    "<< acc_ent/4.0<<endl;
    
    ac->cd(2);
    if (d_zhad->GetSumw2N() == 0) d_zhad->Sumw2(kTRUE);
    if (d_zhada->GetSumw2N() == 0) d_zhada->Sumw2(kTRUE);
    if (d_zhadac->GetSumw2N() == 0) d_zhadac->Sumw2(kTRUE);

    d_zhad->Draw("e, p1");
    d_zhad->SetMarkerStyle(8);
    
    d_zhad->SetMarkerColor(kBlue);

    d_zhadac->Scale(0.25);
    d_zhadac->Draw("e, p1 sames");
    d_zhadac->SetMarkerStyle(8);

    ac->cd(3);
    if (d_Q2->GetSumw2N() == 0) d_Q2->Sumw2(kTRUE);
    if (d_Q2a->GetSumw2N() == 0) d_Q2a->Sumw2(kTRUE);
    if (d_Q2ac->GetSumw2N() == 0) d_Q2ac->Sumw2(kTRUE);

    d_Q2->Draw("e, p1");
    d_Q2->SetMarkerStyle(8);
    d_Q2->SetMarkerColor(kBlue);

    d_Q2ac->Scale(0.25);
    d_Q2ac->Draw("e, p1 sames");
    d_Q2ac->SetMarkerStyle(8);

    ac->cd(4);
    if (d_nu->GetSumw2N() == 0) d_nu->Sumw2(kTRUE);
    if (d_nua->GetSumw2N() == 0) d_nua->Sumw2(kTRUE);
    if (d_nuac->GetSumw2N() == 0) d_nuac->Sumw2(kTRUE);

    d_nu->Draw("e, p1");
    d_nu->SetMarkerStyle(8);
    d_nu->SetMarkerColor(kBlue);

    d_nuac->Scale(0.25);
    d_nuac->Draw("e, p1 sames ");
    d_nuac->SetMarkerStyle(8);

    ac->cd(5);
    if (d_W2->GetSumw2N() == 0) d_W2->Sumw2(kTRUE);
    if (d_W2a->GetSumw2N() == 0) d_W2a->Sumw2(kTRUE);
    if (d_W2ac->GetSumw2N() == 0) d_W2ac->Sumw2(kTRUE);

    d_W2->Draw("e, p1");
    d_W2->SetMarkerStyle(8);
    d_W2->SetMarkerColor(kBlue);

    d_W2ac->Scale(0.25);
    d_W2ac->Draw("e, p1 sames");
    d_W2ac->SetMarkerStyle(8);

    ac->cd(6);
    if (d_Wprime2->GetSumw2N() == 0) d_Wprime2->Sumw2(kTRUE);
    if (d_Wprime2a->GetSumw2N() == 0) d_Wprime2a->Sumw2(kTRUE);
    if (d_Wprime2ac->GetSumw2N() == 0) d_Wprime2ac->Sumw2(kTRUE);

    d_Wprime2->Draw("e, p1");
    d_Wprime2->SetMarkerStyle(8);
    d_Wprime2->SetMarkerColor(kBlue);

    d_Wprime2ac->Scale(0.25);
    d_Wprime2ac->Draw("e, p1 sames");
    d_Wprime2ac->SetMarkerStyle(8);

    ac->SaveAs(Form("pdf/pid_and_accidental_%d.pdf",runs[r]));
    //accidental done 
    
    //Accidental Subtraction here
    d_xbj1->Add(d_xbj,d_xbjac,1.0,-1.0);
    d_zhad1->Add(d_zhad,d_zhadac,1.0,-1.0);
    d_Q21->Add(d_Q2,d_Q2ac,1.0,-1.0);
    d_nu1->Add(d_nu,d_nuac,1.0,-1.0);
    d_W21->Add(d_W2,d_W2ac,1.0,-1.0);
    d_Wprime21->Add(d_Wprime2,d_Wprime2ac,1.0,-1.0);
    
 if (d_xbj1->GetSumw2N() == 0) d_xbj1->Sumw2(kTRUE);
 if (d_zhad1->GetSumw2N() == 0) d_zhad1->Sumw2(kTRUE);
 if (d_Q21->GetSumw2N() == 0) d_Q21->Sumw2(kTRUE);
 if (d_nu1->GetSumw2N() == 0) d_nu1->Sumw2(kTRUE);
 if (d_W21->GetSumw2N() == 0) d_W21->Sumw2(kTRUE);
 if (d_Wprime21->GetSumw2N() == 0) d_Wprime21->Sumw2(kTRUE);

 
    
    ///plot accidental subtracracted hist/////////////////////////

    TCanvas * clean = new TCanvas ("clean", "clean", 1000, 800);
    clean->Divide(3,2);
    clean->cd(1);
    d_xbj1->Draw("e, p1");
    d_xbj1->SetMarkerStyle(8);
    d_xbj1->SetMarkerColor(kBlue);

    clean->cd(2);
    d_zhad1->Draw("e, p1");
    d_zhad1->SetMarkerStyle(8);
    d_zhad1->SetMarkerColor(kBlue);

    
    clean->cd(3);
    d_Q21->Draw("e, p1");
    d_Q21->SetMarkerStyle(8);
    d_Q21->SetMarkerColor(kBlue);
      
    clean->cd(4);
    d_nu1->Draw("e, p1");
    d_nu1->SetMarkerStyle(8);
    d_nu1->SetMarkerColor(kBlue);

    clean->cd(5);
    d_W21->Draw("e, p1");
    d_W21->SetMarkerStyle(8);
    d_W21->SetMarkerColor(kBlue);
    
    clean->cd(6);
    d_Wprime21->Draw("e, p1");
    d_Wprime21->SetMarkerStyle(8);
    d_Wprime21->SetMarkerColor(kBlue);
    clean->SaveAs(Form("pdf/clean_hist_data_before_chargenorm_%d.pdf",runs[r]));
    ///////////////clone hist to normalize by charge/////////////

    TH1D *  d_xbjn = (TH1D*)d_xbj1->Clone();//n = chage Normalized, efficiency corrcted
    TH1D *  d_zhadn = (TH1D*)d_zhad1->Clone();
    TH1D *  d_Q2n = (TH1D*)d_Q21->Clone();
    TH1D *  d_nun = (TH1D*)d_nu1->Clone();
    TH1D *  d_W2n = (TH1D*)d_W21->Clone();
    TH1D *  d_Wprime2n = (TH1D*)d_Wprime21->Clone();


    /////////Define a factor which is f_qelt = charge * LT * HMS TR * SHMS TR These has to define
    ////at the bottom of this page /////////
    
    ///  Double_t f_qelt = charge_sum_cut * LT * tr_eff_hms * tr_eff_shms;
    /////cout << "Run: "<< runs[r]<<"   "<<f_qelt = data Normfac <<f_qelt<<endl;
    
    ////////////////////////////Accidenal done////////////////////
    
    double hcal_did_counts    = hcal_did->GetEntries();
    double hcal_should_counts = hcal_should->GetEntries();
    double hcal_eff = hcal_did_counts/hcal_should_counts;
    double hcal_eff_err = (1/hcal_should_counts) * sqrt(hcal_did_counts * (1-hcal_did_counts/hcal_should_counts));

    
    double pcal_did_counts    = pcal_did->GetEntries();
    double pcal_should_counts = pcal_should->GetEntries();
    double pcal_eff = pcal_did_counts/pcal_should_counts;
    double pcal_eff_err = (1/pcal_should_counts) * sqrt(pcal_did_counts * (1-pcal_did_counts/pcal_should_counts));

    // cout<< runs[r]<<"   "<<current_bcmcut<<"   "<<PTRIG1_Rate<<"   "<<pcal_did_counts<<        "   " <<pcal_should_counts << "   "<< pcal_eff << "   "<<pcal_eff_err<<endl;

     
    double did_hms = hcal_tr_did->GetEntries();
    double should_hms = hcal_tr_should->GetEntries();
    double tr_eff_hms = did_hms/should_hms;
    double tr_eff_hms_err = (1/should_hms) * sqrt(did_hms*(1-did_hms/should_hms));

    
    double did_shms = pcal_tr_did->GetEntries();
    double should_shms = pcal_tr_should->GetEntries();
    double tr_eff_shms = did_shms/should_shms;
    double tr_eff_shms_err = (1/should_shms) * sqrt(did_shms*(1-did_shms/should_shms));
    Double_t current_bcmcut  = charge_sum_cut/tot_scal_cut_time;
    Double_t current_nobcmcut  = charge_sum_cut/tot_scal_cut_time;//==============================================================>Please see it..........just to run script


    //cout<< runs[r]<< " "<<"hdid =  "<<did_hms<<"    "<<"hshould =  " <<should_hms<<"    "<< "htreff =  "   <<tr_eff_hms<<"    "<<"htr_err =  " <<tr_eff_hms_err<< endl;
    //cout<< runs[r]<< " "<<"pdid =  "<<did_shms<<"    "<<"pshould =  " <<should_shms<<"    "<< "ptreff =  "   <<tr_eff_shms<<"    "<<"ptr_err =  " <<tr_eff_shms_err<< endl;

    double entries_pid = hctimect->GetEntries();
    double entries_acc1 = hctimeacc->GetEntries();
    double entries_acc = entries_acc1/4.;

    double counts = entries_pid - entries_acc;
    //cout<< " final good counts in the Run "<< runs[r]<< "  = "<< entries_pid << " - "<< entries_acc << " * 1/4  = " << counts <<endl;  
    
    //livetime
    Double_t nEDTM = 	hedtm_trig_acc_all->Integral();

    // double f_curr  = current_nobcmcut/ current_nobcmcut;//==========================================================================Pleae see it=========>JUST FOR FUN-------------------->
    double pedtmtrigacc_all = hedtm_trig_acc_all->GetEntries();
    double rmeas = pedtmtrigacc_all / tot_scal_cut_EDTM ;
    // double LT = (rmeas - ( 1.0 - f_curr ))/ f_curr;===========================================>commented
    double LT = rmeas;
    Double_t LT_err = sqrt((1-LT) *  LT/tot_scal_cut_EDTM);

    // double LT_err= LT * sqrt(1./pedtmtrigacc_all + 1./pedtmscaler);
    //cout<<"LT for "<< runs[r] <<"\t"<<PTRIG1_Rate<<"\t"<< current_bcmcut<<"\t" <<pedtmtrigacc_all<<"\t"<<pedtmscaler<<"\t"<<f_curr<<"\t"<<LT<<"\t"<<LT_err<<endl;
    //yield
   
    //cout<< "yield for "<<runs[r]<< " : " << PTRIG1_Rate <<"   "<< current_bcmcut<< "   "<<charge_sum_cut <<"   "<< yield <<"   "<<yield_err<< endl;
    
    


    double yield_bare = counts/(charge_sum_cut/1000.);
    double yield_bare_err = yield_bare * sqrt(1/counts);

    double yield = counts/(charge_sum_cut/1000. * tr_eff_hms * tr_eff_shms * hcal_eff * pcal_eff * LT );//livetime is removed for now
    double yield_err = yield * sqrt(1/counts);

    double yield_lttr = counts/(charge_sum_cut/1000. * tr_eff_hms * tr_eff_shms  * LT );//livetime is removed for now
    double yield_lttr_err = yield_lttr * sqrt(1/counts);

    cout<<"counts = "<< entries_pid <<"    "<<entries_acc<<endl;
    cout<<"yield = "<<runs[r]<<"   "<<yield_lttr<<"    "<<yield_lttr_err<<endl;
    cout<<"cur, charge , Rate= "<<runs[r]<<"   "<<current_bcmcut<<"    "<<charge_sum_cut/1000.<<"    "<<PTRIG1_Rate<< endl;
    cout<<"hms tr = "<<runs[r]<<"   "<<tr_eff_hms<<   "   " <<tr_eff_hms_err << endl;
    cout<<"shms tr = "<<runs[r]<<"   "<<tr_eff_shms<<   "   " <<tr_eff_shms_err << endl;
    cout<<"edtm LT = "<<runs[r]<<"   "<<LT<<   "   " <<LT_err << endl;
    //////////////////////clean data hist weighted by charge *LT *Treff//////////////////

 
    Double_t f_qelt = charge_sum_cut*0.001 * LT * tr_eff_hms * tr_eff_shms;
    cout << "Run: "<< runs[r]<<"   "<<"f_qelt = data Normfac = " <<f_qelt<<endl;

 if (d_zhadn->GetSumw2N() == 0) d_zhadn->Sumw2(kTRUE);
 if (d_Q2n->GetSumw2N() == 0) d_Q2n->Sumw2(kTRUE);
 if (d_nun->GetSumw2N() == 0) d_nun->Sumw2(kTRUE);
 if (d_W2n->GetSumw2N() == 0) d_W2n->Sumw2(kTRUE);
 if (d_Wprime2n->GetSumw2N() == 0) d_Wprime2n->Sumw2(kTRUE);

 
    
    ///plot accidental subtracracted hist/////////////////////////

 TCanvas * fin = new TCanvas ("fin", "fin", 1000, 800);
 fin->Divide(3,2);
 fin->cd(1);
 d_xbjn->Scale(1./f_qelt);
 if (d_xbjn->GetSumw2N() == 0) d_xbjn->Sumw2(kTRUE);
 d_xbjn->Draw("e, p1");
 d_xbjn->SetMarkerStyle(8);
 d_xbjn->SetMarkerColor(kBlue);

 fin->cd(2);
 d_zhadn->Scale(1./f_qelt);
 d_zhadn->Draw("e, p1");
 d_zhadn->SetMarkerStyle(8);
 d_zhadn->SetMarkerColor(kBlue);

    
 fin->cd(3);
 d_Q2n->Scale(1./f_qelt);
 d_Q2n->Draw("e, p1");
 d_Q2n->SetMarkerStyle(8);
 d_Q2n->SetMarkerColor(kBlue);
      
 fin->cd(4);
 d_nun->Scale(1./f_qelt);
 d_nun->Draw("e, p1");
 d_nun->SetMarkerStyle(8);
 d_nun->SetMarkerColor(kBlue);

 fin->cd(5);
 d_W2n->Scale(1./f_qelt);
 d_W2n->Draw("e, p1");
 d_W2n->SetMarkerStyle(8);
 d_W2n->SetMarkerColor(kBlue);
    
 fin->cd(6);
 d_Wprime2n->Scale(1./f_qelt);
 d_Wprime2n->Draw("e, p1");
 d_Wprime2n->SetMarkerStyle(8);
 d_Wprime2n->SetMarkerColor(kBlue);
 fin->SaveAs(Form("pdf/final_data_hist_normalized_%d.pdf",runs[r]));
 ///////////////Final Hist are these/////////////







    /////////////////////////////////////Clean data hist final/////////////////////
    
    /*  cout<<"cur+rate+charge_sum_cut+hcaleff+pcaleff = "<<"   "<< runs[r]<<"   "<<current_bcmcut<<"   "<<PTRIG1_Rate<<"   "<<charge_sum_cut<<"   "<<  "   "<< hcal_eff << "   "<<hcal_eff_err<<"   "<< pcal_eff << "   "<<pcal_eff_err<<endl;

	cout<<" tot_cts+counts+acc             ="<< runs[r]<<"   "<< counts << "   "<<entries_pid<< "   "<< entries_acc/4. <<"  "<<endl;

	cout<< runs[r] <<"   "<< yield_bare <<"   "<< yield <<"   "<<  charge_sum_cut <<"   "<< tr_eff_hms << "   "<< tr_eff_shms <<"   "<< hcal_eff <<"   "<<pcal_eff<<"   "<<LT<<endl;
	//cout<<PTRIG1_Rate<<endl;
	*/
    
    TCanvas * c1 = new TCanvas ("c1", "c1", 600, 400);
    c1->Divide(3,2);
 
    c1->cd(1);
    hpbeta->Draw();
    hpbeta->SetTitle(Form("Run Number: %d", runs[r]));
    hpbeta->GetXaxis()->SetTitle("P.gtr.beta");
    hpbeta->SetLineWidth(2);


    c1->cd(2);
    hctime->Draw();
    hctime->SetLineWidth(2);
    hctimeacc->Draw("same");
    hctimeacc->SetLineColor(kRed);
    hctimeacc->SetLineWidth(2);
   
    c1->cd(3);
    hpbetact->Draw();
    hpbetact->SetLineWidth(2);


    c1->cd(4);
    hctimect->Draw();
    hctimect->SetLineWidth(2);

    c1->cd(5);gPad->SetGrid();//no pid
    hRF->Draw();


    c1->cd(6);gPad->SetGrid();//all pid but not RF-----------line draw
    hRF_pid->Draw();

      

    TCanvas * c2 = new TCanvas ("c2", "ctime", 600, 400);
    c2->Divide(2,2);
  
    //canvas 1)basic BW  2)basic + calaero 3) colz 4) pid colz 

    c2->cd(1);
    ctime_vs_rfb->Draw();

    c2->cd(2);
    ctime_vs_rf_calaero->Draw("");

    c2->cd(3);gPad->SetLogz();
    ctime_vs_rf_calaero->Draw("colz");


    c2->cd(4);gPad->SetLogz();
    ctime_vs_rf->Draw("colz");

    TCanvas * c3 = new TCanvas ("c3", "epr", 600, 400);
    //1)basic Black , 2)basic color 3)basic logz 4) pid black 5)pid colz 6)pid logz
    c3->Divide(3,2);
    c3->cd(1);
    epr_vs_rfb->Draw();

    c3->cd(2);
    epr_vs_rfb->Draw("colz");


    c3->cd(3);gPad->SetLogz();
    epr_vs_rfb->Draw("colz");

    c3->cd(4);
    epr_vs_rf->Draw();


    c3->cd(5);
    epr_vs_rf->Draw("colz");

    c3->cd(6);gPad->SetLogz();
    epr_vs_rf->Draw("colz");
    TCanvas * c4 = new TCanvas ("c4", "eptot_shms_tr", 600, 400);
    c4->Divide(2,1);
    
    c4->cd(1);
    pcal_tr_did->Draw();
    pcal_tr_did->SetTitle("pcal_pr_did");
    c4->cd(2);
    pcal_tr_should->Draw();
    pcal_tr_should->SetTitle("pcal_pr_should");

   
    TCanvas * c5 = new TCanvas ("c5", "hcal_pcal_eff", 600, 400);
    c5->Divide(2,2);
    c5->cd(1);
    hcal_did->Draw();
    hcal_did->SetTitle(Form("hcal_did_%d",runs[r]));
    
    c5->cd(2);
    hcal_should->Draw();
    hcal_should->SetTitle("hcal_should");

    c5->cd(3);
    pcal_did->Draw();
    pcal_did->SetTitle("Pcal_did");
    
    c5->cd(4);
    pcal_should->Draw();
    pcal_should->SetTitle("Pcal_should");
    
    txtfile1<< runs[r]<<"   "<<current_bcmcut<<"   "<<PTRIG1_Rate<<"   "<<charge_sum_cut<<"   "<<LT<<           "   " <<LT_err << endl;
    txtfile2<< runs[r]<<"   "<<current_bcmcut<<"   "<<PTRIG1_Rate<<"   "<<charge_sum_cut<<"   "<<tr_eff_hms<<   "   " <<tr_eff_hms_err << endl;
    txtfile3<< runs[r]<<"   "<<current_bcmcut<<"   "<<PTRIG1_Rate<<"   "<<charge_sum_cut<<"   "<<tr_eff_shms<<  "   " <<tr_eff_shms_err << endl;
    txtfile4<< runs[r]<<"   "<<current_bcmcut<<"   "<<PTRIG1_Rate<<"   "<<charge_sum_cut<<"   "<<yield_bare<<   "   " <<yield_bare_err << endl;
    txtfile5<< runs[r]<<"   "<<current_bcmcut<<"   "<<PTRIG1_Rate<<"   "<<charge_sum_cut<<"   "<<yield<<        "   " <<yield_err << endl;
    txtfile6<< runs[r]<<"   "<<current_bcmcut<<"   "<<PTRIG1_Rate<<"   "<<charge_sum_cut<<"   "<<hcal_did_counts<<        "   " <<hcal_should_counts << "   "<< hcal_eff << "   "<<hcal_eff_err<<endl;
    txtfile7<< runs[r]<<"   "<<current_bcmcut<<"   "<<PTRIG1_Rate<<"   "<<charge_sum_cut<<"   "<<pcal_did_counts<<        "   " <<pcal_should_counts << "   "<< pcal_eff << "   "<<pcal_eff_err<<endl;
    txtfile8<< runs[r]<<"   "<<current_bcmcut<<"   "<<PTRIG1_Rate<<"   "<<charge_sum_cut<<"   "<<counts<< "   "<<yield_bare<<"   " <<yield_bare_err<<"   "<<yield_lttr<<"   "<<yield_lttr_err<<"   "<<yield<<"   "<<yield_err<< "   "<< LT <<"   "<< tr_eff_hms<<"   "<< tr_eff_shms<< hcal_eff << "   "<<pcal_eff<<endl;

    txtfile9<<runs[r]<<"\t\t\t"<< counts<<"\t\t\t"<< yield_lttr <<"\t\t\t"<< yield_lttr_err <<endl;
    txtfile10<< runs[r]<<"\t\t"<<max_value<<"\t\t"<<ctmin+ctmax<<"\t\t"<<max_value-ctmin<<"\t\t" << max_value+ctmax<<"\t\t"<<offsetrf<< endl;

    c1->SaveAs(Form("pdf/good_ev_csv_%d.pdf",runs[r]));
    c2->SaveAs(Form("pdf/ctime_vs_rf_%d.pdf",runs[r]));
    c3->SaveAs(Form("pdf/presh_vs_rf_%d.pdf",runs[r]));
    c4->SaveAs(Form("pdf/shms_tracking_%d.pdf",runs[r]));
    c5->SaveAs(Form("pdf/cal_eff_%d.pdf",runs[r]));

    double good_evt = hpbeta->GetEntries();
  
    
    delete  c1;
    delete  c2;
    delete  c3;
    delete  c4;
    delete  c5;

   
     
    //cout<< "==============================================  " <<endl;
    cout<< "Next Run" <<endl;
    cout<< " "<<endl;
  }//runs
 
}//all
